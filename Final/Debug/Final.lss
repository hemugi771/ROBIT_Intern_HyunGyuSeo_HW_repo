
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001f6c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800136  00800136  00002036  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bfe  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb3  00000000  00000000  00003dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001427  00000000  00000000  00004989  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00005db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fb  00000000  00000000  0000610c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000102c  00000000  00000000  00006707  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00007733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_1>
       8:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__vector_2>
       c:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_3>
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_16>
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 33       	cpi	r26, 0x36	; 54
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e3       	ldi	r26, 0x36	; 54
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3a       	cpi	r26, 0xA4	; 164
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 6d 09 	call	0x12da	; 0x12da <main>
      c6:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <busy>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      cc:	8f e3       	ldi	r24, 0x3F	; 63
      ce:	9f e1       	ldi	r25, 0x1F	; 31
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <busy+0x4>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <busy+0xa>
      d6:	00 00       	nop
      d8:	08 95       	ret

000000da <delay_us>:
// 16 cycke = 1 us
void delay_us(U16 time_us)
{
	register U16 i;
	
	for(i = 0; i < time_us; i++)				/* 4 cycle +				*/
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	08 c0       	rjmp	.+16     	; 0xf0 <delay_us+0x16>
	{
		asm volatile(" PUSH  R0 ");				/* 2 cycle +				*/
      e0:	0f 92       	push	r0
		asm volatile(" POP   R0 ");				/* 2 cycle +				*/
      e2:	0f 90       	pop	r0
		asm volatile(" PUSH  R0 ");				/* 2 cycle +				*/
      e4:	0f 92       	push	r0
		asm volatile(" POP   R0 ");				/* 2 cycle +				*/
      e6:	0f 90       	pop	r0
		asm volatile(" PUSH  R0 ");				/* 2 cycle +				*/
      e8:	0f 92       	push	r0
		asm volatile(" POP   R0 ");				/* 2 cycle    =  16 cycle		*/
      ea:	0f 90       	pop	r0
// 16 cycke = 1 us
void delay_us(U16 time_us)
{
	register U16 i;
	
	for(i = 0; i < time_us; i++)				/* 4 cycle +				*/
      ec:	2f 5f       	subi	r18, 0xFF	; 255
      ee:	3f 4f       	sbci	r19, 0xFF	; 255
      f0:	28 17       	cp	r18, r24
      f2:	39 07       	cpc	r19, r25
      f4:	a8 f3       	brcs	.-22     	; 0xe0 <delay_us+0x6>
		asm volatile(" PUSH  R0 ");				/* 2 cycle +				*/
		asm volatile(" POP   R0 ");				/* 2 cycle +				*/
		asm volatile(" PUSH  R0 ");				/* 2 cycle +				*/
		asm volatile(" POP   R0 ");				/* 2 cycle    =  16 cycle		*/
	}
      f6:	08 95       	ret

000000f8 <lcdCommand>:

//------------------------------------------------------------------------------
// 명령 함수
//------------------------------------------------------------------------------
void lcdCommand(U8 byte)
{
      f8:	cf 93       	push	r28
      fa:	c8 2f       	mov	r28, r24
	busy();
      fc:	e7 df       	rcall	.-50     	; 0xcc <busy>
	//인스트럭션 상위 바이트
	LCD_PORT = (byte & 0xf0); //data
      fe:	8c 2f       	mov	r24, r28
     100:	80 7f       	andi	r24, 0xF0	; 240
     102:	85 bb       	out	0x15, r24	; 21
	LCD_PORT &= 0xfe;  //RS = 0
     104:	85 b3       	in	r24, 0x15	; 21
     106:	8e 7f       	andi	r24, 0xFE	; 254
     108:	85 bb       	out	0x15, r24	; 21
	LCD_PORT &= 0xfd;  //RW = 0
     10a:	85 b3       	in	r24, 0x15	; 21
     10c:	8d 7f       	andi	r24, 0xFD	; 253
     10e:	85 bb       	out	0x15, r24	; 21
	delay_us(1);
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	e2 df       	rcall	.-60     	; 0xda <delay_us>
	LCD_PORT |= 0x04;  //E = 1
     116:	85 b3       	in	r24, 0x15	; 21
     118:	84 60       	ori	r24, 0x04	; 4
     11a:	85 bb       	out	0x15, r24	; 21
	delay_us(1);
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	dc df       	rcall	.-72     	; 0xda <delay_us>
	LCD_PORT &= 0xfb;  //E = 0
     122:	85 b3       	in	r24, 0x15	; 21
     124:	8b 7f       	andi	r24, 0xFB	; 251
     126:	85 bb       	out	0x15, r24	; 21
	//instruction low byte
	LCD_PORT = ((byte<<4) & 0xf0); //data
     128:	20 e1       	ldi	r18, 0x10	; 16
     12a:	c2 9f       	mul	r28, r18
     12c:	c0 01       	movw	r24, r0
     12e:	11 24       	eor	r1, r1
     130:	85 bb       	out	0x15, r24	; 21
	LCD_PORT &= 0xfe;  //RS = 0
     132:	85 b3       	in	r24, 0x15	; 21
     134:	8e 7f       	andi	r24, 0xFE	; 254
     136:	85 bb       	out	0x15, r24	; 21
	LCD_PORT &= 0xfd;  //RW = 0
     138:	85 b3       	in	r24, 0x15	; 21
     13a:	8d 7f       	andi	r24, 0xFD	; 253
	delay_us(1);
     13c:	85 bb       	out	0x15, r24	; 21
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	cb df       	rcall	.-106    	; 0xda <delay_us>
	LCD_PORT |= 0x04;  //E = 1
     144:	85 b3       	in	r24, 0x15	; 21
     146:	84 60       	ori	r24, 0x04	; 4
	delay_us(1);
     148:	85 bb       	out	0x15, r24	; 21
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	c5 df       	rcall	.-118    	; 0xda <delay_us>
	LCD_PORT &= 0xfb;  //E = 0
     150:	85 b3       	in	r24, 0x15	; 21
     152:	8b 7f       	andi	r24, 0xFB	; 251
     154:	85 bb       	out	0x15, r24	; 21
}
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <lcdClear>:
//------------------------------------------------------------------------------
// LCD 지우기 함수
//------------------------------------------------------------------------------
void lcdClear(void)
{
	lcdCommand(ALLCLR);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	cd cf       	rjmp	.-102    	; 0xf8 <lcdCommand>
     15e:	08 95       	ret

00000160 <lcdDisplayPosition>:
//------------------------------------------------------------------------------
//                 Display Position Setting Function
//------------------------------------------------------------------------------
void lcdDisplayPosition( U8 line, U8 col )
{
	if(line == 0)		lcdCommand( LINE1 + col );
     160:	81 11       	cpse	r24, r1
     162:	04 c0       	rjmp	.+8      	; 0x16c <lcdDisplayPosition+0xc>
     164:	80 e8       	ldi	r24, 0x80	; 128
     166:	86 0f       	add	r24, r22
     168:	c7 cf       	rjmp	.-114    	; 0xf8 <lcdCommand>
     16a:	08 95       	ret
	else				lcdCommand( LINE2 + col );
     16c:	80 ec       	ldi	r24, 0xC0	; 192
     16e:	86 0f       	add	r24, r22
     170:	c3 cf       	rjmp	.-122    	; 0xf8 <lcdCommand>
     172:	08 95       	ret

00000174 <lcdData>:
}
//------------------------------------------------------------------------------
// 데이타 쓰기 함수
//------------------------------------------------------------------------------
void lcdData(U8 byte)
{
     174:	cf 93       	push	r28
     176:	c8 2f       	mov	r28, r24
	busy();
     178:	a9 df       	rcall	.-174    	; 0xcc <busy>
	//data high byte
	LCD_PORT = (byte & 0xF0); //data
     17a:	8c 2f       	mov	r24, r28
     17c:	80 7f       	andi	r24, 0xF0	; 240
     17e:	85 bb       	out	0x15, r24	; 21
	LCD_PORT |= 0x01;  //RS = 1
     180:	85 b3       	in	r24, 0x15	; 21
     182:	81 60       	ori	r24, 0x01	; 1
     184:	85 bb       	out	0x15, r24	; 21
	LCD_PORT &= 0xfd;  //RW = 0
     186:	85 b3       	in	r24, 0x15	; 21
     188:	8d 7f       	andi	r24, 0xFD	; 253
     18a:	85 bb       	out	0x15, r24	; 21
	delay_us(1);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	a4 df       	rcall	.-184    	; 0xda <delay_us>
	LCD_PORT |= 0x04;  //E = 1
     192:	85 b3       	in	r24, 0x15	; 21
     194:	84 60       	ori	r24, 0x04	; 4
     196:	85 bb       	out	0x15, r24	; 21
	delay_us(1);
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	9e df       	rcall	.-196    	; 0xda <delay_us>
	LCD_PORT &= 0xfb;  //E = 0
     19e:	85 b3       	in	r24, 0x15	; 21
     1a0:	8b 7f       	andi	r24, 0xFB	; 251
     1a2:	85 bb       	out	0x15, r24	; 21
	//data low byte
	LCD_PORT = ((byte<<4) & 0xF0); //data
     1a4:	20 e1       	ldi	r18, 0x10	; 16
     1a6:	c2 9f       	mul	r28, r18
     1a8:	c0 01       	movw	r24, r0
     1aa:	11 24       	eor	r1, r1
     1ac:	85 bb       	out	0x15, r24	; 21
	LCD_PORT |= 0x01;  //RS = 1
     1ae:	85 b3       	in	r24, 0x15	; 21
     1b0:	81 60       	ori	r24, 0x01	; 1
     1b2:	85 bb       	out	0x15, r24	; 21
	LCD_PORT &= 0xfd;  //RW = 0
     1b4:	85 b3       	in	r24, 0x15	; 21
     1b6:	8d 7f       	andi	r24, 0xFD	; 253
	delay_us(1);
     1b8:	85 bb       	out	0x15, r24	; 21
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	8d df       	rcall	.-230    	; 0xda <delay_us>
	LCD_PORT |= 0x04;  //E = 1
     1c0:	85 b3       	in	r24, 0x15	; 21
     1c2:	84 60       	ori	r24, 0x04	; 4
	delay_us(1);
     1c4:	85 bb       	out	0x15, r24	; 21
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	87 df       	rcall	.-242    	; 0xda <delay_us>
	LCD_PORT &= 0xfb;  //E = 0
     1cc:	85 b3       	in	r24, 0x15	; 21
     1ce:	8b 7f       	andi	r24, 0xFB	; 251
     1d0:	85 bb       	out	0x15, r24	; 21
}
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <lcdString>:

//------------------------------------------------------------------------------
// 문자열 출력 함수
//------------------------------------------------------------------------------
void lcdString(U8 line, U8 col, char  *str)
{
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ea 01       	movw	r28, r20
	char  *pStr = 0;
	
	lcdDisplayPosition( line, col );
     1dc:	c1 df       	rcall	.-126    	; 0x160 <lcdDisplayPosition>
	pStr = str;
	while(*pStr)
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <lcdString+0xe>
	{
		lcdData(*pStr++);
     1e0:	21 96       	adiw	r28, 0x01	; 1
     1e2:	c8 df       	rcall	.-112    	; 0x174 <lcdData>
{
	char  *pStr = 0;
	
	lcdDisplayPosition( line, col );
	pStr = str;
	while(*pStr)
     1e4:	88 81       	ld	r24, Y
     1e6:	81 11       	cpse	r24, r1
     1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <lcdString+0xa>
	{
		lcdData(*pStr++);
	}
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <lcdNumber>:

//------------------------------------------------------------------------------
// 숫자 출력 함수
//------------------------------------------------------------------------------
void lcdNumber(U8 line, U8 col, int num)
{
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	c4 56       	subi	r28, 0x64	; 100
     202:	d1 09       	sbc	r29, r1
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
     20e:	f8 2e       	mov	r15, r24
     210:	e6 2e       	mov	r14, r22
	char byte[100] = {0, };
     212:	8e 01       	movw	r16, r28
     214:	0f 5f       	subi	r16, 0xFF	; 255
     216:	1f 4f       	sbci	r17, 0xFF	; 255
     218:	84 e6       	ldi	r24, 0x64	; 100
     21a:	f8 01       	movw	r30, r16
     21c:	11 92       	st	Z+, r1
     21e:	8a 95       	dec	r24
     220:	e9 f7       	brne	.-6      	; 0x21c <lcdNumber+0x2c>
	
	sprintf(byte,"%d",num);
     222:	5f 93       	push	r21
     224:	4f 93       	push	r20
     226:	82 e1       	ldi	r24, 0x12	; 18
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	1f 93       	push	r17
     230:	0f 93       	push	r16
     232:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
	
	lcdString(line, col, byte);
     236:	a8 01       	movw	r20, r16
     238:	6e 2d       	mov	r22, r14
     23a:	8f 2d       	mov	r24, r15
     23c:	cc df       	rcall	.-104    	; 0x1d6 <lcdString>
}
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	cc 59       	subi	r28, 0x9C	; 156
     24c:	df 4f       	sbci	r29, 0xFF	; 255
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	08 95       	ret

00000266 <lcdInit>:
     266:	2f ef       	ldi	r18, 0xFF	; 255
     268:	86 e7       	ldi	r24, 0x76	; 118
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	21 50       	subi	r18, 0x01	; 1
     26e:	80 40       	sbci	r24, 0x00	; 0
     270:	90 40       	sbci	r25, 0x00	; 0
     272:	e1 f7       	brne	.-8      	; 0x26c <lcdInit+0x6>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcdInit+0x10>
     276:	00 00       	nop
// LCD 초기화 함수
//------------------------------------------------------------------------------
void lcdInit(void)
{
	_delay_ms(30);
	LCD_PORT_SETUP();
     278:	8f ef       	ldi	r24, 0xFF	; 255
     27a:	84 bb       	out	0x14, r24	; 20
	LCD_PORT &= 0xFB;	//E = 0
     27c:	85 b3       	in	r24, 0x15	; 21
     27e:	8b 7f       	andi	r24, 0xFB	; 251
     280:	85 bb       	out	0x15, r24	; 21
     282:	8f e5       	ldi	r24, 0x5F	; 95
     284:	9a ee       	ldi	r25, 0xEA	; 234
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcdInit+0x20>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <lcdInit+0x26>
     28c:	00 00       	nop
	_delay_ms(15);
	
	lcdCommand(0x20);
     28e:	80 e2       	ldi	r24, 0x20	; 32
     290:	33 df       	rcall	.-410    	; 0xf8 <lcdCommand>
     292:	8f e1       	ldi	r24, 0x1F	; 31
     294:	9e e4       	ldi	r25, 0x4E	; 78
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <lcdInit+0x30>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <lcdInit+0x36>
     29c:	00 00       	nop
	_delay_ms(5);
	
	lcdCommand(0x20);
     29e:	80 e2       	ldi	r24, 0x20	; 32
     2a0:	2b df       	rcall	.-426    	; 0xf8 <lcdCommand>
	delay_us(200);
     2a2:	88 ec       	ldi	r24, 0xC8	; 200
     2a4:	90 e0       	ldi	r25, 0x00	; 0
	
	lcdCommand(0x20);
     2a6:	19 df       	rcall	.-462    	; 0xda <delay_us>
     2a8:	80 e2       	ldi	r24, 0x20	; 32
	lcdCommand(FUNCSET);
     2aa:	26 df       	rcall	.-436    	; 0xf8 <lcdCommand>
     2ac:	88 e2       	ldi	r24, 0x28	; 40
	lcdCommand(DISPON);
     2ae:	24 df       	rcall	.-440    	; 0xf8 <lcdCommand>
     2b0:	8c e0       	ldi	r24, 0x0C	; 12
	lcdCommand(ALLCLR);
     2b2:	22 df       	rcall	.-444    	; 0xf8 <lcdCommand>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
	lcdCommand(ENTMODE);
     2b6:	20 df       	rcall	.-448    	; 0xf8 <lcdCommand>
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	1e df       	rcall	.-452    	; 0xf8 <lcdCommand>
	
	lcdString(0,0,"Init OK");
     2bc:	45 e1       	ldi	r20, 0x15	; 21
     2be:	51 e0       	ldi	r21, 0x01	; 1
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	88 cf       	rjmp	.-240    	; 0x1d6 <lcdString>
     2c6:	08 95       	ret

000002c8 <ADCFilter>:
     2c8:	8f 92       	push	r8

unsigned int motorstatus = 1; // 1전진 2후진 3좌회전 4우회전
unsigned int bit = 0x00; // LED 인식에 사용할 비트들

// 이동 평균 필터 함수
unsigned int ADCFilter(unsigned int channel) {
     2ca:	9f 92       	push	r9
     2cc:	af 92       	push	r10
     2ce:	bf 92       	push	r11
     2d0:	cf 92       	push	r12
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	ac 01       	movw	r20, r24
	unsigned long sum = 0;
	for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
unsigned int motorstatus = 1; // 1전진 2후진 3좌회전 4우회전
unsigned int bit = 0x00; // LED 인식에 사용할 비트들

// 이동 평균 필터 함수
unsigned int ADCFilter(unsigned int channel) {
	unsigned long sum = 0;
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	cb 01       	movw	r24, r22
	for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
     2e6:	16 c0       	rjmp	.+44     	; 0x314 <ADCFilter+0x4c>
		sum += IRBuffers[channel][i];
     2e8:	fa 01       	movw	r30, r20
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	e4 0f       	add	r30, r20
     2f4:	f5 1f       	adc	r31, r21
     2f6:	e2 0f       	add	r30, r18
     2f8:	f3 1f       	adc	r31, r19
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	ee 59       	subi	r30, 0x9E	; 158
     300:	fe 4f       	sbci	r31, 0xFE	; 254
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	6e 0f       	add	r22, r30
     30a:	7f 1f       	adc	r23, r31
     30c:	81 1d       	adc	r24, r1
     30e:	91 1d       	adc	r25, r1
unsigned int bit = 0x00; // LED 인식에 사용할 비트들

// 이동 평균 필터 함수
unsigned int ADCFilter(unsigned int channel) {
	unsigned long sum = 0;
	for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	3f 4f       	sbci	r19, 0xFF	; 255
     314:	25 30       	cpi	r18, 0x05	; 5
     316:	31 05       	cpc	r19, r1
     318:	38 f3       	brcs	.-50     	; 0x2e8 <ADCFilter+0x20>
		sum += IRBuffers[channel][i];
	}
	return (unsigned int)(sum / BUFFER_SIZE);
     31a:	2d ec       	ldi	r18, 0xCD	; 205
     31c:	3c ec       	ldi	r19, 0xCC	; 204
     31e:	4c ec       	ldi	r20, 0xCC	; 204
     320:	5c ec       	ldi	r21, 0xCC	; 204
     322:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__umulsidi3>
     326:	00 e2       	ldi	r16, 0x20	; 32
     328:	0e 94 b5 0c 	call	0x196a	; 0x196a <__lshrdi3>
     32c:	82 2e       	mov	r8, r18
     32e:	93 2e       	mov	r9, r19
     330:	a4 2e       	mov	r10, r20
     332:	b5 2e       	mov	r11, r21
     334:	d5 01       	movw	r26, r10
     336:	c4 01       	movw	r24, r8
     338:	b6 95       	lsr	r27
     33a:	a7 95       	ror	r26
     33c:	97 95       	ror	r25
     33e:	87 95       	ror	r24
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
}
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	df 90       	pop	r13
     350:	cf 90       	pop	r12
     352:	bf 90       	pop	r11
     354:	af 90       	pop	r10
     356:	9f 90       	pop	r9
     358:	8f 90       	pop	r8
     35a:	08 95       	ret

0000035c <PSDFilter>:

unsigned int PSDFilter(unsigned int channel) {
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	ac 01       	movw	r20, r24
	unsigned long sum = 0;
	for (unsigned int i = 0; i < 3; i++) {
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
	}
	return (unsigned int)(sum / BUFFER_SIZE);
}

unsigned int PSDFilter(unsigned int channel) {
	unsigned long sum = 0;
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	cb 01       	movw	r24, r22
	for (unsigned int i = 0; i < 3; i++) {
     37a:	14 c0       	rjmp	.+40     	; 0x3a4 <PSDFilter+0x48>
		sum += PSDBuffers[channel][i];
     37c:	fa 01       	movw	r30, r20
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	e4 0f       	add	r30, r20
     384:	f5 1f       	adc	r31, r21
     386:	e2 0f       	add	r30, r18
     388:	f3 1f       	adc	r31, r19
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	ea 5b       	subi	r30, 0xBA	; 186
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	01 90       	ld	r0, Z+
     394:	f0 81       	ld	r31, Z
     396:	e0 2d       	mov	r30, r0
     398:	6e 0f       	add	r22, r30
     39a:	7f 1f       	adc	r23, r31
     39c:	81 1d       	adc	r24, r1
     39e:	91 1d       	adc	r25, r1
	return (unsigned int)(sum / BUFFER_SIZE);
}

unsigned int PSDFilter(unsigned int channel) {
	unsigned long sum = 0;
	for (unsigned int i = 0; i < 3; i++) {
     3a0:	2f 5f       	subi	r18, 0xFF	; 255
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	23 30       	cpi	r18, 0x03	; 3
     3a6:	31 05       	cpc	r19, r1
     3a8:	48 f3       	brcs	.-46     	; 0x37c <PSDFilter+0x20>
		sum += PSDBuffers[channel][i];
	}
	return (unsigned int)(sum / 3);
     3aa:	2b ea       	ldi	r18, 0xAB	; 171
     3ac:	3a ea       	ldi	r19, 0xAA	; 170
     3ae:	4a ea       	ldi	r20, 0xAA	; 170
     3b0:	5a ea       	ldi	r21, 0xAA	; 170
     3b2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__umulsidi3>
     3b6:	00 e2       	ldi	r16, 0x20	; 32
     3b8:	0e 94 b5 0c 	call	0x196a	; 0x196a <__lshrdi3>
     3bc:	82 2e       	mov	r8, r18
     3be:	93 2e       	mov	r9, r19
     3c0:	a4 2e       	mov	r10, r20
     3c2:	b5 2e       	mov	r11, r21
     3c4:	d5 01       	movw	r26, r10
     3c6:	c4 01       	movw	r24, r8
     3c8:	b6 95       	lsr	r27
     3ca:	a7 95       	ror	r26
     3cc:	97 95       	ror	r25
     3ce:	87 95       	ror	r24
}
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	08 95       	ret

000003e4 <readSidePSD>:

int readSidePSD(void){
	unsigned int SPSDsensor;
	
	ADMUX = 0x47; // ADC 채널 선택
     3e4:	87 e4       	ldi	r24, 0x47	; 71
     3e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40; // ADC 변환 시작
     3e8:	86 b1       	in	r24, 0x06	; 6
     3ea:	80 64       	ori	r24, 0x40	; 64
     3ec:	86 b9       	out	0x06, r24	; 6
	while ((ADCSRA & 0x10) == 0); // 변환 완료 대기
     3ee:	34 9b       	sbis	0x06, 4	; 6
     3f0:	fe cf       	rjmp	.-4      	; 0x3ee <readSidePSD+0xa>
	ADCSRA |= 0x10; // ADIF 플래그 클리어
     3f2:	86 b1       	in	r24, 0x06	; 6
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	86 b9       	out	0x06, r24	; 6
	
	PSDBuffers[0][1] = ADC;
     3f8:	84 b1       	in	r24, 0x04	; 4
     3fa:	95 b1       	in	r25, 0x05	; 5
     3fc:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <PSDBuffers+0x3>
     400:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <PSDBuffers+0x2>

	SPSDsensor = PSDFilter(0)*100/700;//얘는 700까지 올라가는 반면
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	a9 df       	rcall	.-174    	; 0x35c <PSDFilter>
     40a:	24 e6       	ldi	r18, 0x64	; 100
     40c:	ac 01       	movw	r20, r24
     40e:	24 9f       	mul	r18, r20
     410:	c0 01       	movw	r24, r0
     412:	25 9f       	mul	r18, r21
     414:	90 0d       	add	r25, r0
     416:	11 24       	eor	r1, r1
     418:	6c eb       	ldi	r22, 0xBC	; 188
     41a:	72 e0       	ldi	r23, 0x02	; 2
     41c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__udivmodhi4>
     420:	cb 01       	movw	r24, r22
	//PSD값 받기, 거리 범위에 따라 값 받기
	
	//PSDsensor값 13 정도를 기준으로 10에서 16까지를 안정권으로 잡자
	return SPSDsensor;

}
     422:	08 95       	ret

00000424 <readFrontPSD>:

int readFrontPSD(void){
	unsigned int FPSDsensor;
	
	ADMUX = 0x40; // ADC 채널 선택
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40; // ADC 변환 시작
     428:	86 b1       	in	r24, 0x06	; 6
     42a:	80 64       	ori	r24, 0x40	; 64
     42c:	86 b9       	out	0x06, r24	; 6
	while ((ADCSRA & 0x10) == 0); // 변환 완료 대기
     42e:	34 9b       	sbis	0x06, 4	; 6
     430:	fe cf       	rjmp	.-4      	; 0x42e <readFrontPSD+0xa>
	ADCSRA |= 0x10; // ADIF 플래그 클리어
     432:	86 b1       	in	r24, 0x06	; 6
     434:	80 61       	ori	r24, 0x10	; 16
     436:	86 b9       	out	0x06, r24	; 6
		
	PSDBuffers[1][1] = ADC;
     438:	84 b1       	in	r24, 0x04	; 4
     43a:	95 b1       	in	r25, 0x05	; 5
     43c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <PSDBuffers+0x9>
     440:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <PSDBuffers+0x8>
	
	FPSDsensor = PSDFilter(1)*100/205;//얘는 205 정도까지밖에 안올라감
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	89 df       	rcall	.-238    	; 0x35c <PSDFilter>
     44a:	24 e6       	ldi	r18, 0x64	; 100
     44c:	28 9f       	mul	r18, r24
     44e:	a0 01       	movw	r20, r0
     450:	29 9f       	mul	r18, r25
     452:	50 0d       	add	r21, r0
     454:	11 24       	eor	r1, r1
     456:	9a 01       	movw	r18, r20
     458:	a1 eb       	ldi	r26, 0xB1	; 177
     45a:	bf e3       	ldi	r27, 0x3F	; 63
     45c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__umulhisi3>
     460:	48 1b       	sub	r20, r24
     462:	59 0b       	sbc	r21, r25
     464:	56 95       	lsr	r21
     466:	47 95       	ror	r20
     468:	84 0f       	add	r24, r20
     46a:	95 1f       	adc	r25, r21
	//PSD값 받기, 거리 범위에 따라 값 받기
	//PSDsensor값 13 정도를 기준으로 10에서 16까지를 안정권으로 잡자
	return FPSDsensor;

}
     46c:	88 0f       	add	r24, r24
     46e:	89 2f       	mov	r24, r25
     470:	88 1f       	adc	r24, r24
     472:	99 0b       	sbc	r25, r25
     474:	91 95       	neg	r25
     476:	08 95       	ret

00000478 <utillizePSD>:

unsigned int utillizePSD(int channel){//측면 쓸거면 채널0, 전방 쓸거면 채널1
		//여기에 PSD값 입력- PSD값 범위로 나누기
		if (channel == 0){
     478:	00 97       	sbiw	r24, 0x00	; 0
     47a:	71 f4       	brne	.+28     	; 0x498 <utillizePSD+0x20>
			sidePSD = readSidePSD();
     47c:	b3 df       	rcall	.-154    	; 0x3e4 <readSidePSD>
     47e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <sidePSD+0x1>
     482:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <sidePSD>
			lcdNumber(0, 11, sidePSD);
     486:	ac 01       	movw	r20, r24
     488:	6b e0       	ldi	r22, 0x0B	; 11
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	b1 de       	rcall	.-670    	; 0x1f0 <lcdNumber>
			return sidePSD;
     48e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sidePSD>
     492:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <sidePSD+0x1>
     496:	08 95       	ret
		}else if(channel == 1){
     498:	01 97       	sbiw	r24, 0x01	; 1
			frontPSD = readFrontPSD();
     49a:	71 f4       	brne	.+28     	; 0x4b8 <utillizePSD+0x40>
     49c:	c3 df       	rcall	.-122    	; 0x424 <readFrontPSD>
     49e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <frontPSD+0x1>
     4a2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <frontPSD>
			lcdNumber(0, 14, frontPSD);
     4a6:	ac 01       	movw	r20, r24
     4a8:	6e e0       	ldi	r22, 0x0E	; 14
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	a1 de       	rcall	.-702    	; 0x1f0 <lcdNumber>
			return frontPSD;
     4ae:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <frontPSD>
     4b2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <frontPSD+0x1>
     4b6:	08 95       	ret
		}else{
		lcdNumber(0, 11, 00);
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	6b e0       	ldi	r22, 0x0B	; 11
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	97 de       	rcall	.-722    	; 0x1f0 <lcdNumber>
		lcdNumber(0, 14, 00);
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	6e e0       	ldi	r22, 0x0E	; 14
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	92 de       	rcall	.-732    	; 0x1f0 <lcdNumber>
     4cc:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <MODE1>:
		}
}
     4d2:	9c 01       	movw	r18, r24
	unsigned int CENTER = ((1 << (4 - 1 + 1)) - 1) << 1; // 가운데 4개 비트
	unsigned int RIGHT = ((1 << (2 - 0 + 1)) - 1) << 0; // 우측 3개 비트
	unsigned int LEFT = ((1 << (5 - 3 + 1)) - 1) << 3; // 좌측 3개 비트
	
	
	if ((((IRbit & CENTER) == (0b0100 << 1) ||
     4d4:	2e 71       	andi	r18, 0x1E	; 30
     4d6:	33 27       	eor	r19, r19
     4d8:	28 30       	cpi	r18, 0x08	; 8
     4da:	31 05       	cpc	r19, r1
     4dc:	91 f0       	breq	.+36     	; 0x502 <MODE1+0x30>
     4de:	24 30       	cpi	r18, 0x04	; 4
     4e0:	31 05       	cpc	r19, r1
     4e2:	79 f0       	breq	.+30     	; 0x502 <MODE1+0x30>
	(IRbit & CENTER) == (0b0010 << 1) || (IRbit & CENTER) == (0b0110 << 1) || (IRbit & CENTER) == (0b0000 << 1)
     4e4:	2c 30       	cpi	r18, 0x0C	; 12
     4e6:	31 05       	cpc	r19, r1
     4e8:	61 f0       	breq	.+24     	; 0x502 <MODE1+0x30>
     4ea:	21 15       	cp	r18, r1
     4ec:	31 05       	cpc	r19, r1
     4ee:	49 f0       	breq	.+18     	; 0x502 <MODE1+0x30>
	|| (IRbit & CENTER) == (0b0100 << 1)|| (IRbit & CENTER) == (0b0111 << 1)|| (IRbit & CENTER) == (0b1110 << 1))
     4f0:	28 30       	cpi	r18, 0x08	; 8
     4f2:	31 05       	cpc	r19, r1
     4f4:	31 f0       	breq	.+12     	; 0x502 <MODE1+0x30>
     4f6:	2e 30       	cpi	r18, 0x0E	; 14
     4f8:	31 05       	cpc	r19, r1
     4fa:	19 f0       	breq	.+6      	; 0x502 <MODE1+0x30>
     4fc:	2c 31       	cpi	r18, 0x1C	; 28
     4fe:	31 05       	cpc	r19, r1
     500:	41 f5       	brne	.+80     	; 0x552 <MODE1+0x80>
	&& !(IRbit & (1 << 5)) && !(IRbit & (1 << 0)))) {
     502:	85 fd       	sbrc	r24, 5
     504:	26 c0       	rjmp	.+76     	; 0x552 <MODE1+0x80>
     506:	80 fd       	sbrc	r24, 0
     508:	24 c0       	rjmp	.+72     	; 0x552 <MODE1+0x80>
		//반전색 선 인식
			if(sec > 12){
     50a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
     50e:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     512:	0d 97       	sbiw	r24, 0x0d	; 13
     514:	0c f4       	brge	.+2      	; 0x518 <MODE1+0x46>
     516:	83 c0       	rjmp	.+262    	; 0x61e <MODE1+0x14c>
				MODE = 2;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <MODE+0x1>
     520:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <MODE>
				lcdClear();
     524:	1a de       	rcall	.-972    	; 0x15a <lcdClear>
				lcdString(0, 0, "time:");
     526:	4d e1       	ldi	r20, 0x1D	; 29
     528:	51 e0       	ldi	r21, 0x01	; 1
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	53 de       	rcall	.-858    	; 0x1d6 <lcdString>
				lcdString(1, 0, "motor:");
     530:	43 e2       	ldi	r20, 0x23	; 35
     532:	51 e0       	ldi	r21, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	4e de       	rcall	.-868    	; 0x1d6 <lcdString>
				lcdString(1, 9 ,"MODE: ");
     53a:	4a e2       	ldi	r20, 0x2A	; 42
     53c:	51 e0       	ldi	r21, 0x01	; 1
     53e:	69 e0       	ldi	r22, 0x09	; 9
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	49 de       	rcall	.-878    	; 0x1d6 <lcdString>
				sec = 0;
     544:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sec+0x1>
     548:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <sec>
				return 0;
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	08 95       	ret
				}else{
				return 0;
			}	
	} else if (((IRbit & CENTER) == (0b1011 << 1) ||  
     552:	26 31       	cpi	r18, 0x16	; 22
     554:	31 05       	cpc	r19, r1
     556:	a9 f0       	breq	.+42     	; 0x582 <MODE1+0xb0>
     558:	2a 31       	cpi	r18, 0x1A	; 26
     55a:	31 05       	cpc	r19, r1
     55c:	91 f0       	breq	.+36     	; 0x582 <MODE1+0xb0>
	(IRbit & CENTER) == (0b1101 << 1) || (IRbit & CENTER) == (0b0000 << 1) ||
     55e:	21 15       	cp	r18, r1
     560:	31 05       	cpc	r19, r1
     562:	79 f0       	breq	.+30     	; 0x582 <MODE1+0xb0>
     564:	22 31       	cpi	r18, 0x12	; 18
     566:	31 05       	cpc	r19, r1
     568:	61 f0       	breq	.+24     	; 0x582 <MODE1+0xb0>
	(IRbit & CENTER) == (0b1001 << 1) || (IRbit & CENTER) == (0b1100 << 1) ||
     56a:	28 31       	cpi	r18, 0x18	; 24
     56c:	31 05       	cpc	r19, r1
     56e:	49 f0       	breq	.+18     	; 0x582 <MODE1+0xb0>
     570:	26 30       	cpi	r18, 0x06	; 6
     572:	31 05       	cpc	r19, r1
     574:	31 f0       	breq	.+12     	; 0x582 <MODE1+0xb0>
	(IRbit & CENTER) == (0b0011 << 1) || (IRbit & CENTER) == (0b0001 << 1) ||
     576:	22 30       	cpi	r18, 0x02	; 2
     578:	31 05       	cpc	r19, r1
     57a:	19 f0       	breq	.+6      	; 0x582 <MODE1+0xb0>
     57c:	20 31       	cpi	r18, 0x10	; 16
     57e:	31 05       	cpc	r19, r1
     580:	21 f4       	brne	.+8      	; 0x58a <MODE1+0xb8>
	(IRbit & CENTER) == (0b1000 << 1)) && (IRbit & (1 << 5)) && (IRbit & (1 << 0))) {
     582:	85 ff       	sbrs	r24, 5
     584:	02 c0       	rjmp	.+4      	; 0x58a <MODE1+0xb8>
     586:	80 fd       	sbrc	r24, 0
     588:	4d c0       	rjmp	.+154    	; 0x624 <MODE1+0x152>
		// 가운데 줄 인식 - 직진
		return 1;

		
	} else if (((IRbit & LEFT) == (0b011 << 3) || (IRbit & LEFT) == (0b001 << 3) || (IRbit & LEFT) == (0b000 << 3)
     58a:	9c 01       	movw	r18, r24
     58c:	28 73       	andi	r18, 0x38	; 56
     58e:	33 27       	eor	r19, r19
     590:	28 31       	cpi	r18, 0x18	; 24
     592:	31 05       	cpc	r19, r1
     594:	49 f0       	breq	.+18     	; 0x5a8 <MODE1+0xd6>
     596:	28 30       	cpi	r18, 0x08	; 8
     598:	31 05       	cpc	r19, r1
     59a:	31 f0       	breq	.+12     	; 0x5a8 <MODE1+0xd6>
     59c:	21 15       	cp	r18, r1
     59e:	31 05       	cpc	r19, r1
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <MODE1+0xd6>
	|| (IRbit & LEFT) == (0b101 << 3)) && (IRbit & (1 << 0))) {  
     5a2:	28 32       	cpi	r18, 0x28	; 40
     5a4:	31 05       	cpc	r19, r1
     5a6:	11 f4       	brne	.+4      	; 0x5ac <MODE1+0xda>
     5a8:	80 fd       	sbrc	r24, 0
     5aa:	3f c0       	rjmp	.+126    	; 0x62a <MODE1+0x158>
		// 좌측 3개 비트
		return 3;


	} else if ((((IRbit & RIGHT) == (0b110 << 0) || (IRbit & RIGHT) == (0b100 << 0) || (IRbit & RIGHT) == (0b000 << 0))
     5ac:	9c 01       	movw	r18, r24
     5ae:	27 70       	andi	r18, 0x07	; 7
     5b0:	33 27       	eor	r19, r19
     5b2:	26 30       	cpi	r18, 0x06	; 6
     5b4:	31 05       	cpc	r19, r1
     5b6:	61 f0       	breq	.+24     	; 0x5d0 <MODE1+0xfe>
     5b8:	24 30       	cpi	r18, 0x04	; 4
     5ba:	31 05       	cpc	r19, r1
     5bc:	49 f0       	breq	.+18     	; 0x5d0 <MODE1+0xfe>
     5be:	21 15       	cp	r18, r1
     5c0:	31 05       	cpc	r19, r1
     5c2:	31 f0       	breq	.+12     	; 0x5d0 <MODE1+0xfe>
|| (IRbit & RIGHT) == (0b001 << 0) || (IRbit & RIGHT) == (0b101 << 0)) && (IRbit & (1 << 5))) {
     5c4:	21 30       	cpi	r18, 0x01	; 1
     5c6:	31 05       	cpc	r19, r1
     5c8:	19 f0       	breq	.+6      	; 0x5d0 <MODE1+0xfe>
     5ca:	25 30       	cpi	r18, 0x05	; 5
     5cc:	31 05       	cpc	r19, r1
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <MODE1+0x102>
     5d0:	85 fd       	sbrc	r24, 5
     5d2:	2e c0       	rjmp	.+92     	; 0x630 <MODE1+0x15e>
		//우측 3개 비트
		return 4;

} else if ((IRbit) == 0b111111) {
     5d4:	cf 97       	sbiw	r24, 0x3f	; 63
     5d6:	79 f5       	brne	.+94     	; 0x636 <MODE1+0x164>
	// 아무것도 인식 못할 때: 우회전(1구간 바코드전)
		if(sec > 14){
     5d8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
     5dc:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     5e0:	0f 97       	sbiw	r24, 0x0f	; 15
     5e2:	64 f1       	brlt	.+88     	; 0x63c <MODE1+0x16a>
			MODE = 2;
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <MODE+0x1>
     5ec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <MODE>
			lcdClear();
			lcdString(0, 0, "time:");
     5f0:	b4 dd       	rcall	.-1176   	; 0x15a <lcdClear>
     5f2:	4d e1       	ldi	r20, 0x1D	; 29
     5f4:	51 e0       	ldi	r21, 0x01	; 1
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	80 e0       	ldi	r24, 0x00	; 0
			lcdString(1, 0, "motor:");
     5fa:	ed dd       	rcall	.-1062   	; 0x1d6 <lcdString>
     5fc:	43 e2       	ldi	r20, 0x23	; 35
     5fe:	51 e0       	ldi	r21, 0x01	; 1
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	81 e0       	ldi	r24, 0x01	; 1
			lcdString(1, 9 ,"MODE: ");
     604:	e8 dd       	rcall	.-1072   	; 0x1d6 <lcdString>
     606:	4a e2       	ldi	r20, 0x2A	; 42
     608:	51 e0       	ldi	r21, 0x01	; 1
     60a:	69 e0       	ldi	r22, 0x09	; 9
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	e3 dd       	rcall	.-1082   	; 0x1d6 <lcdString>
			sec = 0;
     610:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sec+0x1>
     614:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <sec>
			return 4;
     618:	84 e0       	ldi	r24, 0x04	; 4
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	08 95       	ret
				lcdString(1, 0, "motor:");
				lcdString(1, 9 ,"MODE: ");
				sec = 0;
				return 0;
				}else{
				return 0;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	08 95       	ret
	(IRbit & CENTER) == (0b1101 << 1) || (IRbit & CENTER) == (0b0000 << 1) ||
	(IRbit & CENTER) == (0b1001 << 1) || (IRbit & CENTER) == (0b1100 << 1) ||
	(IRbit & CENTER) == (0b0011 << 1) || (IRbit & CENTER) == (0b0001 << 1) ||
	(IRbit & CENTER) == (0b1000 << 1)) && (IRbit & (1 << 5)) && (IRbit & (1 << 0))) {
		// 가운데 줄 인식 - 직진
		return 1;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	08 95       	ret

		
	} else if (((IRbit & LEFT) == (0b011 << 3) || (IRbit & LEFT) == (0b001 << 3) || (IRbit & LEFT) == (0b000 << 3)
	|| (IRbit & LEFT) == (0b101 << 3)) && (IRbit & (1 << 0))) {  
		// 좌측 3개 비트
		return 3;
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	08 95       	ret


	} else if ((((IRbit & RIGHT) == (0b110 << 0) || (IRbit & RIGHT) == (0b100 << 0) || (IRbit & RIGHT) == (0b000 << 0))
|| (IRbit & RIGHT) == (0b001 << 0) || (IRbit & RIGHT) == (0b101 << 0)) && (IRbit & (1 << 5))) {
		//우측 3개 비트
		return 4;
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	08 95       	ret
			return 4;
			}else{
			return 4;
		}	
	}
	return 2; // 기본값 (에러)
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret
			lcdString(1, 0, "motor:");
			lcdString(1, 9 ,"MODE: ");
			sec = 0;
			return 4;
			}else{
			return 4;
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	90 e0       	ldi	r25, 0x00	; 0
		}	
	}
	return 2; // 기본값 (에러)
}
     640:	08 95       	ret

00000642 <MODE2>:
	unsigned int CENTER = ((1 << (4 - 1 + 1)) - 1) << 1; // 가운데 4개 비트
	unsigned int RIGHT = ((1 << (2 - 0 + 1)) - 1) << 0; // 우측 3개 비트
	unsigned int LEFT = ((1 << (5 - 3 + 1)) - 1) << 3; // 좌측 3개 비트
	
	
	if ((((IRbit & CENTER) == (0b0100 << 1) ||
     642:	9c 01       	movw	r18, r24
     644:	2e 71       	andi	r18, 0x1E	; 30
     646:	33 27       	eor	r19, r19
     648:	28 30       	cpi	r18, 0x08	; 8
     64a:	31 05       	cpc	r19, r1
     64c:	99 f0       	breq	.+38     	; 0x674 <MODE2+0x32>
     64e:	24 30       	cpi	r18, 0x04	; 4
     650:	31 05       	cpc	r19, r1
     652:	81 f0       	breq	.+32     	; 0x674 <MODE2+0x32>
	(IRbit & CENTER) == (0b0010 << 1) || (IRbit & CENTER) == (0b0110 << 1) || (IRbit & CENTER) == (0b0000 << 1)
     654:	2c 30       	cpi	r18, 0x0C	; 12
     656:	31 05       	cpc	r19, r1
     658:	69 f0       	breq	.+26     	; 0x674 <MODE2+0x32>
     65a:	21 15       	cp	r18, r1
     65c:	31 05       	cpc	r19, r1
     65e:	51 f0       	breq	.+20     	; 0x674 <MODE2+0x32>
	|| (IRbit & CENTER) == (0b0100 << 1)|| (IRbit & CENTER) == (0b0111 << 1)|| (IRbit & CENTER) == (0b1110 << 1))
     660:	28 30       	cpi	r18, 0x08	; 8
     662:	31 05       	cpc	r19, r1
     664:	39 f0       	breq	.+14     	; 0x674 <MODE2+0x32>
     666:	2e 30       	cpi	r18, 0x0E	; 14
     668:	31 05       	cpc	r19, r1
     66a:	21 f0       	breq	.+8      	; 0x674 <MODE2+0x32>
     66c:	2c 31       	cpi	r18, 0x1C	; 28
     66e:	31 05       	cpc	r19, r1
     670:	09 f0       	breq	.+2      	; 0x674 <MODE2+0x32>
     672:	61 c0       	rjmp	.+194    	; 0x736 <MODE2+0xf4>
	&& !(IRbit & (1 << 5)) && !(IRbit & (1 << 0)))) {
     674:	85 fd       	sbrc	r24, 5
     676:	5f c0       	rjmp	.+190    	; 0x736 <MODE2+0xf4>
     678:	80 fd       	sbrc	r24, 0
     67a:	5d c0       	rjmp	.+186    	; 0x736 <MODE2+0xf4>
		//반전색 선 인식
		if (IRbit == 0b000000) {//반전 구간 진입시 정규화를 다시 하지 않으면 흰 테이프를 인식못함
     67c:	89 2b       	or	r24, r25
     67e:	09 f0       	breq	.+2      	; 0x682 <MODE2+0x40>
     680:	53 c0       	rjmp	.+166    	; 0x728 <MODE2+0xe6>
			if (cnt >= 20) {//일정 시간 동안 반전 구간에 머무르면
     682:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <cnt>
     686:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <cnt+0x1>
     68a:	84 31       	cpi	r24, 0x14	; 20
     68c:	91 05       	cpc	r25, r1
     68e:	0c f4       	brge	.+2      	; 0x692 <MODE2+0x50>
     690:	3c c0       	rjmp	.+120    	; 0x70a <MODE2+0xc8>
				MODE = 3;
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <MODE+0x1>
     69a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <MODE>
				lcdClear();
     69e:	5d dd       	rcall	.-1350   	; 0x15a <lcdClear>
				lcdString(0, 0, "time:");
     6a0:	4d e1       	ldi	r20, 0x1D	; 29
     6a2:	51 e0       	ldi	r21, 0x01	; 1
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	96 dd       	rcall	.-1236   	; 0x1d6 <lcdString>
				lcdString(1, 0, "motor:");
     6aa:	43 e2       	ldi	r20, 0x23	; 35
     6ac:	51 e0       	ldi	r21, 0x01	; 1
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	91 dd       	rcall	.-1246   	; 0x1d6 <lcdString>
				lcdString(1, 9, "MODE: ");
     6b4:	4a e2       	ldi	r20, 0x2A	; 42
     6b6:	51 e0       	ldi	r21, 0x01	; 1
     6b8:	69 e0       	ldi	r22, 0x09	; 9
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	8c dd       	rcall	.-1256   	; 0x1d6 <lcdString>
				sec = 0;
     6be:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sec+0x1>
     6c2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <sec>
				DFC = 0;
     6c6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <DFC+0x1>
     6ca:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <DFC>
				cnt = 0;
				enablePSD = 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <enablePSD+0x1>
     6d6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <enablePSD>
				for (int i = 0; i < 6; i++) {//정규화 배열 초기화
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	11 c0       	rjmp	.+34     	; 0x702 <MODE2+0xc0>
					IRmin[i] = 1024;
     6e0:	c9 01       	movw	r24, r18
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	fc 01       	movw	r30, r24
     6e8:	ee 5f       	subi	r30, 0xFE	; 254
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	54 e0       	ldi	r21, 0x04	; 4
     6f0:	51 83       	std	Z+1, r21	; 0x01
     6f2:	40 83       	st	Z, r20
					IRmax[i] = 0;
     6f4:	fc 01       	movw	r30, r24
     6f6:	e8 5c       	subi	r30, 0xC8	; 200
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	11 82       	std	Z+1, r1	; 0x01
     6fc:	10 82       	st	Z, r1
				lcdString(1, 9, "MODE: ");
				sec = 0;
				DFC = 0;
				cnt = 0;
				enablePSD = 1;
				for (int i = 0; i < 6; i++) {//정규화 배열 초기화
     6fe:	2f 5f       	subi	r18, 0xFF	; 255
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	26 30       	cpi	r18, 0x06	; 6
     704:	31 05       	cpc	r19, r1
     706:	64 f3       	brlt	.-40     	; 0x6e0 <MODE2+0x9e>
     708:	0f c0       	rjmp	.+30     	; 0x728 <MODE2+0xe6>
					IRmin[i] = 1024;
					IRmax[i] = 0;
				}
			}
			else {//cnt가 덜 찼으면
				if (sec > 2) {
     70a:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <sec>
     70e:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <sec+0x1>
     712:	23 30       	cpi	r18, 0x03	; 3
     714:	31 05       	cpc	r19, r1
     716:	44 f0       	brlt	.+16     	; 0x728 <MODE2+0xe6>
					cnt++;
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <cnt+0x1>
     71e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <cnt>
					return 1;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	08 95       	ret
				}
			}
		}
		cnt = 0;
     728:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <cnt+0x1>
     72c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <cnt>
		return 0;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	08 95       	ret
		
	} else if (((IRbit & CENTER) == (0b1011 << 1) ||
     736:	26 31       	cpi	r18, 0x16	; 22
     738:	31 05       	cpc	r19, r1
     73a:	a9 f0       	breq	.+42     	; 0x766 <MODE2+0x124>
     73c:	2a 31       	cpi	r18, 0x1A	; 26
     73e:	31 05       	cpc	r19, r1
     740:	91 f0       	breq	.+36     	; 0x766 <MODE2+0x124>
	(IRbit & CENTER) == (0b1101 << 1) || (IRbit & CENTER) == (0b0000 << 1) ||
     742:	21 15       	cp	r18, r1
     744:	31 05       	cpc	r19, r1
     746:	79 f0       	breq	.+30     	; 0x766 <MODE2+0x124>
     748:	22 31       	cpi	r18, 0x12	; 18
     74a:	31 05       	cpc	r19, r1
     74c:	61 f0       	breq	.+24     	; 0x766 <MODE2+0x124>
	(IRbit & CENTER) == (0b1001 << 1) || (IRbit & CENTER) == (0b1100 << 1) ||
     74e:	28 31       	cpi	r18, 0x18	; 24
     750:	31 05       	cpc	r19, r1
     752:	49 f0       	breq	.+18     	; 0x766 <MODE2+0x124>
     754:	26 30       	cpi	r18, 0x06	; 6
     756:	31 05       	cpc	r19, r1
     758:	31 f0       	breq	.+12     	; 0x766 <MODE2+0x124>
	(IRbit & CENTER) == (0b0011 << 1) || (IRbit & CENTER) == (0b0001 << 1) ||
     75a:	22 30       	cpi	r18, 0x02	; 2
     75c:	31 05       	cpc	r19, r1
     75e:	19 f0       	breq	.+6      	; 0x766 <MODE2+0x124>
     760:	20 31       	cpi	r18, 0x10	; 16
     762:	31 05       	cpc	r19, r1
     764:	21 f4       	brne	.+8      	; 0x76e <MODE2+0x12c>
	(IRbit & CENTER) == (0b1000 << 1)) && (IRbit & (1 << 5)) && (IRbit & (1 << 0))) {
     766:	85 ff       	sbrs	r24, 5
     768:	02 c0       	rjmp	.+4      	; 0x76e <MODE2+0x12c>
     76a:	80 fd       	sbrc	r24, 0
     76c:	33 c0       	rjmp	.+102    	; 0x7d4 <MODE2+0x192>
		// 가운데 줄 인식 - 직진
		return 1;
		
	} else if (((IRbit & LEFT) == (0b011 << 3) || (IRbit & LEFT) == (0b001 << 3) || (IRbit & LEFT) == (0b000 << 3)
     76e:	9c 01       	movw	r18, r24
     770:	28 73       	andi	r18, 0x38	; 56
     772:	33 27       	eor	r19, r19
     774:	28 31       	cpi	r18, 0x18	; 24
     776:	31 05       	cpc	r19, r1
     778:	49 f0       	breq	.+18     	; 0x78c <MODE2+0x14a>
     77a:	28 30       	cpi	r18, 0x08	; 8
     77c:	31 05       	cpc	r19, r1
     77e:	31 f0       	breq	.+12     	; 0x78c <MODE2+0x14a>
     780:	21 15       	cp	r18, r1
     782:	31 05       	cpc	r19, r1
     784:	19 f0       	breq	.+6      	; 0x78c <MODE2+0x14a>
	|| (IRbit & LEFT) == (0b101 << 3)) && (IRbit & (1 << 0))) {
     786:	28 32       	cpi	r18, 0x28	; 40
     788:	31 05       	cpc	r19, r1
     78a:	49 f4       	brne	.+18     	; 0x79e <MODE2+0x15c>
     78c:	80 ff       	sbrs	r24, 0
     78e:	07 c0       	rjmp	.+14     	; 0x79e <MODE2+0x15c>
		// 좌측 3개 비트
		cnt = 0;
     790:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <cnt+0x1>
     794:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <cnt>
		return 5;
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	08 95       	ret

	} else if ((((IRbit & RIGHT) == (0b110 << 0) || (IRbit & RIGHT) == (0b100 << 0) || (IRbit & RIGHT) == (0b000 << 0))
     79e:	9c 01       	movw	r18, r24
     7a0:	27 70       	andi	r18, 0x07	; 7
     7a2:	33 27       	eor	r19, r19
     7a4:	26 30       	cpi	r18, 0x06	; 6
     7a6:	31 05       	cpc	r19, r1
     7a8:	61 f0       	breq	.+24     	; 0x7c2 <MODE2+0x180>
     7aa:	24 30       	cpi	r18, 0x04	; 4
     7ac:	31 05       	cpc	r19, r1
     7ae:	49 f0       	breq	.+18     	; 0x7c2 <MODE2+0x180>
     7b0:	21 15       	cp	r18, r1
     7b2:	31 05       	cpc	r19, r1
     7b4:	31 f0       	breq	.+12     	; 0x7c2 <MODE2+0x180>
	|| (IRbit & RIGHT) == (0b001 << 0) || (IRbit & RIGHT) == (0b101 << 0)) && (IRbit & (1 << 5))) {
     7b6:	21 30       	cpi	r18, 0x01	; 1
     7b8:	31 05       	cpc	r19, r1
     7ba:	19 f0       	breq	.+6      	; 0x7c2 <MODE2+0x180>
     7bc:	25 30       	cpi	r18, 0x05	; 5
     7be:	31 05       	cpc	r19, r1
     7c0:	61 f4       	brne	.+24     	; 0x7da <MODE2+0x198>
     7c2:	85 ff       	sbrs	r24, 5
     7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <MODE2+0x19e>
		//우측 3개 비트
		cnt = 0;
     7c6:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <cnt+0x1>
     7ca:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <cnt>
		return 6;
     7ce:	86 e0       	ldi	r24, 0x06	; 6
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	08 95       	ret
	(IRbit & CENTER) == (0b1101 << 1) || (IRbit & CENTER) == (0b0000 << 1) ||
	(IRbit & CENTER) == (0b1001 << 1) || (IRbit & CENTER) == (0b1100 << 1) ||
	(IRbit & CENTER) == (0b0011 << 1) || (IRbit & CENTER) == (0b0001 << 1) ||
	(IRbit & CENTER) == (0b1000 << 1)) && (IRbit & (1 << 5)) && (IRbit & (1 << 0))) {
		// 가운데 줄 인식 - 직진
		return 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	08 95       	ret
		//우측 3개 비트
		cnt = 0;
		return 6;

		} else if ((IRbit) == 0b111111) {
		return 2;
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	08 95       	ret
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 2; // 기본값 (에러)
}
     7e4:	08 95       	ret

000007e6 <MODE3>:

int MODE3(unsigned int IRbit){
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
	unsigned int CENTER = ((1 << (4 - 1 + 1)) - 1) << 1; // 가운데 4개 비트
	unsigned int RIGHT = ((1 << (2 - 0 + 1)) - 1) << 0; // 우측 3개 비트
	unsigned int LEFT = ((1 << (5 - 3 + 1)) - 1) << 3; // 좌측 3개 비트
	
	
	if ((((IRbit & CENTER) == (0b0100 << 1) ||
     7ea:	9c 01       	movw	r18, r24
     7ec:	2e 71       	andi	r18, 0x1E	; 30
     7ee:	33 27       	eor	r19, r19
     7f0:	28 30       	cpi	r18, 0x08	; 8
     7f2:	31 05       	cpc	r19, r1
     7f4:	99 f0       	breq	.+38     	; 0x81c <MODE3+0x36>
     7f6:	24 30       	cpi	r18, 0x04	; 4
     7f8:	31 05       	cpc	r19, r1
     7fa:	81 f0       	breq	.+32     	; 0x81c <MODE3+0x36>
	(IRbit & CENTER) == (0b0010 << 1) || (IRbit & CENTER) == (0b0110 << 1) || (IRbit & CENTER) == (0b0000 << 1)
     7fc:	2c 30       	cpi	r18, 0x0C	; 12
     7fe:	31 05       	cpc	r19, r1
     800:	69 f0       	breq	.+26     	; 0x81c <MODE3+0x36>
     802:	21 15       	cp	r18, r1
     804:	31 05       	cpc	r19, r1
     806:	51 f0       	breq	.+20     	; 0x81c <MODE3+0x36>
	|| (IRbit & CENTER) == (0b0100 << 1)|| (IRbit & CENTER) == (0b0111 << 1)|| (IRbit & CENTER) == (0b1110 << 1))
     808:	28 30       	cpi	r18, 0x08	; 8
     80a:	31 05       	cpc	r19, r1
     80c:	39 f0       	breq	.+14     	; 0x81c <MODE3+0x36>
     80e:	2e 30       	cpi	r18, 0x0E	; 14
     810:	31 05       	cpc	r19, r1
     812:	21 f0       	breq	.+8      	; 0x81c <MODE3+0x36>
     814:	2c 31       	cpi	r18, 0x1C	; 28
     816:	31 05       	cpc	r19, r1
     818:	09 f0       	breq	.+2      	; 0x81c <MODE3+0x36>
     81a:	4d c0       	rjmp	.+154    	; 0x8b6 <MODE3+0xd0>
	&& !(IRbit & (1 << 5)) && !(IRbit & (1 << 0)))) {
     81c:	85 fd       	sbrc	r24, 5
     81e:	4b c0       	rjmp	.+150    	; 0x8b6 <MODE3+0xd0>
     820:	80 fd       	sbrc	r24, 0
     822:	49 c0       	rjmp	.+146    	; 0x8b6 <MODE3+0xd0>
		//반전색 선 인식
		if ((IRbit & CENTER) == (0b0000 << 1)) {//3구간 벽 시작과 끝, 차단기 앞 흰 선
     824:	23 2b       	or	r18, r19
     826:	09 f0       	breq	.+2      	; 0x82a <MODE3+0x44>
     828:	32 c1       	rjmp	.+612    	; 0xa8e <MODE3+0x2a8>
			if (enablePSD == 0 && sec >= 1) {
     82a:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <enablePSD>
     82e:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <enablePSD+0x1>
     832:	20 97       	sbiw	r28, 0x00	; 0
     834:	a1 f4       	brne	.+40     	; 0x85e <MODE3+0x78>
     836:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
     83a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     83e:	18 16       	cp	r1, r24
     840:	19 06       	cpc	r1, r25
     842:	6c f4       	brge	.+26     	; 0x85e <MODE3+0x78>
				enablePSD = 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <enablePSD+0x1>
     84c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <enablePSD>
				utillizePSD(0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	11 de       	rcall	.-990    	; 0x478 <utillizePSD>
				utillizePSD(1);
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e de       	rcall	.-996    	; 0x478 <utillizePSD>
				return 0;
     85c:	44 c1       	rjmp	.+648    	; 0xae6 <MODE3+0x300>
			}
			else if (enablePSD == 1) {
     85e:	c1 30       	cpi	r28, 0x01	; 1
     860:	d1 05       	cpc	r29, r1
     862:	09 f0       	breq	.+2      	; 0x866 <MODE3+0x80>
     864:	17 c1       	rjmp	.+558    	; 0xa94 <MODE3+0x2ae>
				if (sec > 4 && sec <= 6) {//차단기 기다리기
     866:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
     86a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     86e:	9c 01       	movw	r18, r24
     870:	25 50       	subi	r18, 0x05	; 5
     872:	31 09       	sbc	r19, r1
     874:	22 30       	cpi	r18, 0x02	; 2
     876:	31 05       	cpc	r19, r1
     878:	08 f4       	brcc	.+2      	; 0x87c <MODE3+0x96>
     87a:	0f c1       	rjmp	.+542    	; 0xa9a <MODE3+0x2b4>
					return 9;
				}else if (sec > 6){
     87c:	07 97       	sbiw	r24, 0x07	; 7
     87e:	0c f4       	brge	.+2      	; 0x882 <MODE3+0x9c>
     880:	32 c1       	rjmp	.+612    	; 0xae6 <MODE3+0x300>
					if (utillizePSD(1) >= 40) {//차단기에 너무 가까이 있으면
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	f8 dd       	rcall	.-1040   	; 0x478 <utillizePSD>
     888:	88 97       	sbiw	r24, 0x28	; 40
     88a:	08 f0       	brcs	.+2      	; 0x88e <MODE3+0xa8>
     88c:	09 c1       	rjmp	.+530    	; 0xaa0 <MODE3+0x2ba>
						return 2;
					}
					else if (utillizePSD(1) < 40 && utillizePSD(1) >= 29) {//차단기 올라가는거 기다리기
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	f2 dd       	rcall	.-1052   	; 0x478 <utillizePSD>
     894:	88 97       	sbiw	r24, 0x28	; 40
     896:	30 f4       	brcc	.+12     	; 0x8a4 <MODE3+0xbe>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	ed dd       	rcall	.-1062   	; 0x478 <utillizePSD>
     89e:	4d 97       	sbiw	r24, 0x1d	; 29
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <MODE3+0xbe>
     8a2:	01 c1       	rjmp	.+514    	; 0xaa6 <MODE3+0x2c0>
						return 9;
					}
					else if (utillizePSD(1) < 29) {//차단기 올라가면
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	e7 dd       	rcall	.-1074   	; 0x478 <utillizePSD>
     8aa:	4d 97       	sbiw	r24, 0x1d	; 29
     8ac:	08 f0       	brcs	.+2      	; 0x8b0 <MODE3+0xca>
     8ae:	fe c0       	rjmp	.+508    	; 0xaac <MODE3+0x2c6>
     8b0:	c0 e0       	ldi	r28, 0x00	; 0
						return 0;
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
     8b4:	18 c1       	rjmp	.+560    	; 0xae6 <MODE3+0x300>
     8b6:	26 31       	cpi	r18, 0x16	; 22
		}
		else {
			return 1;
		}
		
	} else if (((IRbit & CENTER) == (0b1011 << 1) ||
     8b8:	31 05       	cpc	r19, r1
     8ba:	a9 f0       	breq	.+42     	; 0x8e6 <MODE3+0x100>
     8bc:	2a 31       	cpi	r18, 0x1A	; 26
     8be:	31 05       	cpc	r19, r1
     8c0:	91 f0       	breq	.+36     	; 0x8e6 <MODE3+0x100>
     8c2:	21 15       	cp	r18, r1
	(IRbit & CENTER) == (0b1101 << 1) || (IRbit & CENTER) == (0b0000 << 1) ||
     8c4:	31 05       	cpc	r19, r1
     8c6:	79 f0       	breq	.+30     	; 0x8e6 <MODE3+0x100>
     8c8:	22 31       	cpi	r18, 0x12	; 18
     8ca:	31 05       	cpc	r19, r1
     8cc:	61 f0       	breq	.+24     	; 0x8e6 <MODE3+0x100>
     8ce:	28 31       	cpi	r18, 0x18	; 24
	(IRbit & CENTER) == (0b1001 << 1) || (IRbit & CENTER) == (0b1100 << 1) ||
     8d0:	31 05       	cpc	r19, r1
     8d2:	49 f0       	breq	.+18     	; 0x8e6 <MODE3+0x100>
     8d4:	26 30       	cpi	r18, 0x06	; 6
     8d6:	31 05       	cpc	r19, r1
     8d8:	31 f0       	breq	.+12     	; 0x8e6 <MODE3+0x100>
     8da:	22 30       	cpi	r18, 0x02	; 2
	(IRbit & CENTER) == (0b0011 << 1) || (IRbit & CENTER) == (0b0001 << 1) ||
     8dc:	31 05       	cpc	r19, r1
     8de:	19 f0       	breq	.+6      	; 0x8e6 <MODE3+0x100>
     8e0:	20 31       	cpi	r18, 0x10	; 16
     8e2:	31 05       	cpc	r19, r1
     8e4:	a9 f4       	brne	.+42     	; 0x910 <MODE3+0x12a>
     8e6:	85 ff       	sbrs	r24, 5
	(IRbit & CENTER) == (0b1000 << 1)) && (IRbit & (1 << 5)) && (IRbit & (1 << 0))) {
     8e8:	13 c0       	rjmp	.+38     	; 0x910 <MODE3+0x12a>
     8ea:	80 ff       	sbrs	r24, 0
     8ec:	11 c0       	rjmp	.+34     	; 0x910 <MODE3+0x12a>
     8ee:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <enablePSD>
		// 가운데 줄 인식 - 직진
		
		if(enablePSD == 1  && utillizePSD(1) > 40){
     8f2:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <enablePSD+0x1>
     8f6:	c1 30       	cpi	r28, 0x01	; 1
     8f8:	d1 05       	cpc	r29, r1
     8fa:	09 f0       	breq	.+2      	; 0x8fe <MODE3+0x118>
     8fc:	da c0       	rjmp	.+436    	; 0xab2 <MODE3+0x2cc>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	ba dd       	rcall	.-1164   	; 0x478 <utillizePSD>
     904:	89 97       	sbiw	r24, 0x29	; 41
     906:	08 f4       	brcc	.+2      	; 0x90a <MODE3+0x124>
     908:	ee c0       	rjmp	.+476    	; 0xae6 <MODE3+0x300>
     90a:	c2 e0       	ldi	r28, 0x02	; 2
			return 2;
     90c:	d0 e0       	ldi	r29, 0x00	; 0
     90e:	eb c0       	rjmp	.+470    	; 0xae6 <MODE3+0x300>
     910:	9c 01       	movw	r18, r24
		}else{
			return 1;
		}
	} else if (((IRbit & LEFT) == (0b011 << 3) || (IRbit & LEFT) == (0b001 << 3) || (IRbit & LEFT) == (0b000 << 3)
     912:	28 73       	andi	r18, 0x38	; 56
     914:	33 27       	eor	r19, r19
     916:	28 31       	cpi	r18, 0x18	; 24
     918:	31 05       	cpc	r19, r1
     91a:	49 f0       	breq	.+18     	; 0x92e <MODE3+0x148>
     91c:	28 30       	cpi	r18, 0x08	; 8
     91e:	31 05       	cpc	r19, r1
     920:	31 f0       	breq	.+12     	; 0x92e <MODE3+0x148>
     922:	21 15       	cp	r18, r1
     924:	31 05       	cpc	r19, r1
     926:	19 f0       	breq	.+6      	; 0x92e <MODE3+0x148>
     928:	28 32       	cpi	r18, 0x28	; 40
	|| (IRbit & LEFT) == (0b101 << 3)) && (IRbit & (1 << 0))) {
     92a:	31 05       	cpc	r19, r1
     92c:	11 f4       	brne	.+4      	; 0x932 <MODE3+0x14c>
     92e:	80 fd       	sbrc	r24, 0
     930:	c3 c0       	rjmp	.+390    	; 0xab8 <MODE3+0x2d2>
     932:	9c 01       	movw	r18, r24
		// 좌측 3개 비트
		return 1;

	} else if ((((IRbit & RIGHT) == (0b110 << 0) || (IRbit & RIGHT) == (0b100 << 0) || (IRbit & RIGHT) == (0b000 << 0))
     934:	27 70       	andi	r18, 0x07	; 7
     936:	33 27       	eor	r19, r19
     938:	26 30       	cpi	r18, 0x06	; 6
     93a:	31 05       	cpc	r19, r1
     93c:	61 f0       	breq	.+24     	; 0x956 <MODE3+0x170>
     93e:	24 30       	cpi	r18, 0x04	; 4
     940:	31 05       	cpc	r19, r1
     942:	49 f0       	breq	.+18     	; 0x956 <MODE3+0x170>
     944:	21 15       	cp	r18, r1
     946:	31 05       	cpc	r19, r1
     948:	31 f0       	breq	.+12     	; 0x956 <MODE3+0x170>
     94a:	21 30       	cpi	r18, 0x01	; 1
	|| (IRbit & RIGHT) == (0b001 << 0) || (IRbit & RIGHT) == (0b101 << 0)) && (IRbit & (1 << 5))) {
     94c:	31 05       	cpc	r19, r1
     94e:	19 f0       	breq	.+6      	; 0x956 <MODE3+0x170>
     950:	25 30       	cpi	r18, 0x05	; 5
     952:	31 05       	cpc	r19, r1
     954:	11 f4       	brne	.+4      	; 0x95a <MODE3+0x174>
     956:	85 fd       	sbrc	r24, 5
     958:	b2 c0       	rjmp	.+356    	; 0xabe <MODE3+0x2d8>
     95a:	cf 97       	sbiw	r24, 0x3f	; 63
				sec = 0;
				cnt = 0;
				return 41;
		}

		} else if ((IRbit) == 0b111111) {
     95c:	09 f0       	breq	.+2      	; 0x960 <MODE3+0x17a>
     95e:	b2 c0       	rjmp	.+356    	; 0xac4 <MODE3+0x2de>
     960:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <enablePSD>
		// 아무것도 인식 못할 때
		if (enablePSD == 1) {
     964:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <enablePSD+0x1>
     968:	c1 30       	cpi	r28, 0x01	; 1
     96a:	d1 05       	cpc	r29, r1
     96c:	09 f0       	breq	.+2      	; 0x970 <MODE3+0x18a>
			utillizePSD(0);
     96e:	86 c0       	rjmp	.+268    	; 0xa7c <MODE3+0x296>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	81 dd       	rcall	.-1278   	; 0x478 <utillizePSD>
			utillizePSD(1);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	7e dd       	rcall	.-1284   	; 0x478 <utillizePSD>
     97c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
			if (sec < 9) {//벽타기
     980:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     984:	89 30       	cpi	r24, 0x09	; 9
     986:	91 05       	cpc	r25, r1
     988:	04 f5       	brge	.+64     	; 0x9ca <MODE3+0x1e4>
				if (utillizePSD(0) > 21) {//가까우면
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	74 dd       	rcall	.-1304   	; 0x478 <utillizePSD>
     990:	46 97       	sbiw	r24, 0x16	; 22
     992:	08 f0       	brcs	.+2      	; 0x996 <MODE3+0x1b0>
     994:	9a c0       	rjmp	.+308    	; 0xaca <MODE3+0x2e4>
					return 7;
				}
				else if (utillizePSD(0) <= 21 && utillizePSD(0) >= 16) {//적당하면
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	6e dd       	rcall	.-1316   	; 0x478 <utillizePSD>
     99c:	46 97       	sbiw	r24, 0x16	; 22
     99e:	30 f4       	brcc	.+12     	; 0x9ac <MODE3+0x1c6>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	69 dd       	rcall	.-1326   	; 0x478 <utillizePSD>
     9a6:	40 97       	sbiw	r24, 0x10	; 16
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <MODE3+0x1c6>
     9aa:	9d c0       	rjmp	.+314    	; 0xae6 <MODE3+0x300>
					return 1;
				}
				else if (utillizePSD(0) < 16 && utillizePSD(0) > 10) {//멀면
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	63 dd       	rcall	.-1338   	; 0x478 <utillizePSD>
     9b2:	40 97       	sbiw	r24, 0x10	; 16
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <MODE3+0x1d2>
     9b6:	8c c0       	rjmp	.+280    	; 0xad0 <MODE3+0x2ea>
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	5d dd       	rcall	.-1350   	; 0x478 <utillizePSD>
     9be:	0b 97       	sbiw	r24, 0x0b	; 11
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <MODE3+0x1de>
     9c2:	89 c0       	rjmp	.+274    	; 0xad6 <MODE3+0x2f0>
     9c4:	c8 e0       	ldi	r28, 0x08	; 8
					return 8;
     9c6:	d0 e0       	ldi	r29, 0x00	; 0
     9c8:	8e c0       	rjmp	.+284    	; 0xae6 <MODE3+0x300>
     9ca:	0a 97       	sbiw	r24, 0x0a	; 10
				else {
					return 5;//예외 처리
				}
			}
			else {
				if (sec > 9) {//주차 -> 회전 시간 맞춰야함
     9cc:	0c f4       	brge	.+2      	; 0x9d0 <MODE3+0x1ea>
     9ce:	86 c0       	rjmp	.+268    	; 0xadc <MODE3+0x2f6>
					if (utillizePSD(1) >= 29) {
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	51 dd       	rcall	.-1374   	; 0x478 <utillizePSD>
     9d6:	4d 97       	sbiw	r24, 0x1d	; 29
     9d8:	08 f4       	brcc	.+2      	; 0x9dc <MODE3+0x1f6>
						PORTB = (PORTB & 0xF0) | 0x00;
     9da:	4c c0       	rjmp	.+152    	; 0xa74 <MODE3+0x28e>
     9dc:	88 b3       	in	r24, 0x18	; 24
     9de:	80 7f       	andi	r24, 0xF0	; 240
						OCR1A = ICR1 * 0.0;
     9e0:	88 bb       	out	0x18, r24	; 24
     9e2:	66 b5       	in	r22, 0x26	; 38
     9e4:	77 b5       	in	r23, 0x27	; 39
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	5a d6       	rcall	.+3252   	; 0x16a0 <__floatunsisf>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	a9 01       	movw	r20, r18
     9f2:	0c d7       	rcall	.+3608   	; 0x180c <__mulsf3>
     9f4:	29 d6       	rcall	.+3154   	; 0x1648 <__fixunssfsi>
     9f6:	7b bd       	out	0x2b, r23	; 43
						OCR1B = ICR1 * 0.0;
     9f8:	6a bd       	out	0x2a, r22	; 42
     9fa:	66 b5       	in	r22, 0x26	; 38
     9fc:	77 b5       	in	r23, 0x27	; 39
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	4e d6       	rcall	.+3228   	; 0x16a0 <__floatunsisf>
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	a9 01       	movw	r20, r18
     a0a:	00 d7       	rcall	.+3584   	; 0x180c <__mulsf3>
     a0c:	1d d6       	rcall	.+3130   	; 0x1648 <__fixunssfsi>
     a0e:	79 bd       	out	0x29, r23	; 41
     a10:	68 bd       	out	0x28, r22	; 40
     a12:	2f ef       	ldi	r18, 0xFF	; 255
     a14:	83 e2       	ldi	r24, 0x23	; 35
     a16:	94 ef       	ldi	r25, 0xF4	; 244
     a18:	21 50       	subi	r18, 0x01	; 1
     a1a:	80 40       	sbci	r24, 0x00	; 0
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <MODE3+0x232>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <MODE3+0x23c>
						_delay_ms(5000);
						PORTB = (PORTB & 0xF0) | 0x06;
     a22:	00 00       	nop
     a24:	88 b3       	in	r24, 0x18	; 24
     a26:	80 7f       	andi	r24, 0xF0	; 240
						OCR1A = ICR1 * 0.4;
     a28:	86 60       	ori	r24, 0x06	; 6
     a2a:	88 bb       	out	0x18, r24	; 24
     a2c:	66 b5       	in	r22, 0x26	; 38
     a2e:	77 b5       	in	r23, 0x27	; 39
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	35 d6       	rcall	.+3178   	; 0x16a0 <__floatunsisf>
     a36:	2d ec       	ldi	r18, 0xCD	; 205
     a38:	3c ec       	ldi	r19, 0xCC	; 204
     a3a:	4c ec       	ldi	r20, 0xCC	; 204
     a3c:	5e e3       	ldi	r21, 0x3E	; 62
     a3e:	e6 d6       	rcall	.+3532   	; 0x180c <__mulsf3>
     a40:	03 d6       	rcall	.+3078   	; 0x1648 <__fixunssfsi>
     a42:	7b bd       	out	0x2b, r23	; 43
						OCR1B = ICR1 * 0.4;
     a44:	6a bd       	out	0x2a, r22	; 42
     a46:	66 b5       	in	r22, 0x26	; 38
     a48:	77 b5       	in	r23, 0x27	; 39
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	28 d6       	rcall	.+3152   	; 0x16a0 <__floatunsisf>
     a50:	2d ec       	ldi	r18, 0xCD	; 205
     a52:	3c ec       	ldi	r19, 0xCC	; 204
     a54:	4c ec       	ldi	r20, 0xCC	; 204
     a56:	5e e3       	ldi	r21, 0x3E	; 62
     a58:	d9 d6       	rcall	.+3506   	; 0x180c <__mulsf3>
     a5a:	f6 d5       	rcall	.+3052   	; 0x1648 <__fixunssfsi>
     a5c:	79 bd       	out	0x29, r23	; 41
     a5e:	68 bd       	out	0x28, r22	; 40
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	83 ed       	ldi	r24, 0xD3	; 211
     a64:	90 e3       	ldi	r25, 0x30	; 48
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	80 40       	sbci	r24, 0x00	; 0
     a6a:	90 40       	sbci	r25, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <MODE3+0x280>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <MODE3+0x28a>
     a70:	00 00       	nop
     a72:	39 c0       	rjmp	.+114    	; 0xae6 <MODE3+0x300>
						_delay_ms(1000);
						return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
					}
					else if (utillizePSD(1) < 29) {
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	ff dc       	rcall	.-1538   	; 0x478 <utillizePSD>
     a7a:	35 c0       	rjmp	.+106    	; 0xae6 <MODE3+0x300>
     a7c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
						return 1;
					}
				}
			}
		}
		else if (sec <= 1) {//PSD 꺼졌을때(2구간 처음 진입할때)
     a80:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     a84:	02 97       	sbiw	r24, 0x02	; 2
     a86:	6c f5       	brge	.+90     	; 0xae2 <MODE3+0x2fc>
     a88:	c8 e0       	ldi	r28, 0x08	; 8
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
			return 8;
     a8c:	2c c0       	rjmp	.+88     	; 0xae6 <MODE3+0x300>
     a8e:	c1 e0       	ldi	r28, 0x01	; 1
     a90:	d0 e0       	ldi	r29, 0x00	; 0
				return 2;
			}

		}
		else {
			return 1;
     a92:	29 c0       	rjmp	.+82     	; 0xae6 <MODE3+0x300>
     a94:	c2 e0       	ldi	r28, 0x02	; 2
     a96:	d0 e0       	ldi	r29, 0x00	; 0
					return 1;//차단기가 없는 구간에서는 직진
				}

			}
			else {//2구간 처음 진입 시
				return 2;
     a98:	26 c0       	rjmp	.+76     	; 0xae6 <MODE3+0x300>
     a9a:	c9 e0       	ldi	r28, 0x09	; 9
     a9c:	d0 e0       	ldi	r29, 0x00	; 0
				utillizePSD(1);
				return 0;
			}
			else if (enablePSD == 1) {
				if (sec > 4 && sec <= 6) {//차단기 기다리기
					return 9;
     a9e:	23 c0       	rjmp	.+70     	; 0xae6 <MODE3+0x300>
     aa0:	c2 e0       	ldi	r28, 0x02	; 2
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
				}else if (sec > 6){
					if (utillizePSD(1) >= 40) {//차단기에 너무 가까이 있으면
						return 2;
     aa4:	20 c0       	rjmp	.+64     	; 0xae6 <MODE3+0x300>
     aa6:	c9 e0       	ldi	r28, 0x09	; 9
     aa8:	d0 e0       	ldi	r29, 0x00	; 0
					}
					else if (utillizePSD(1) < 40 && utillizePSD(1) >= 29) {//차단기 올라가는거 기다리기
						return 9;
     aaa:	1d c0       	rjmp	.+58     	; 0xae6 <MODE3+0x300>
     aac:	c2 e0       	ldi	r28, 0x02	; 2
     aae:	d0 e0       	ldi	r29, 0x00	; 0
		else if (sec <= 1) {//PSD 꺼졌을때(2구간 처음 진입할때)
			return 8;
		}
		return 5;
	}
	return 2; // 기본값 (에러)
     ab0:	1a c0       	rjmp	.+52     	; 0xae6 <MODE3+0x300>
     ab2:	c1 e0       	ldi	r28, 0x01	; 1
     ab4:	d0 e0       	ldi	r29, 0x00	; 0
		// 가운데 줄 인식 - 직진
		
		if(enablePSD == 1  && utillizePSD(1) > 40){
			return 2;
		}else{
			return 1;
     ab6:	17 c0       	rjmp	.+46     	; 0xae6 <MODE3+0x300>
     ab8:	c1 e0       	ldi	r28, 0x01	; 1
     aba:	d0 e0       	ldi	r29, 0x00	; 0
		}
	} else if (((IRbit & LEFT) == (0b011 << 3) || (IRbit & LEFT) == (0b001 << 3) || (IRbit & LEFT) == (0b000 << 3)
	|| (IRbit & LEFT) == (0b101 << 3)) && (IRbit & (1 << 0))) {
		// 좌측 3개 비트
		return 1;
     abc:	14 c0       	rjmp	.+40     	; 0xae6 <MODE3+0x300>
     abe:	c4 e0       	ldi	r28, 0x04	; 4
     ac0:	d0 e0       	ldi	r29, 0x00	; 0

	} else if ((((IRbit & RIGHT) == (0b110 << 0) || (IRbit & RIGHT) == (0b100 << 0) || (IRbit & RIGHT) == (0b000 << 0))
	|| (IRbit & RIGHT) == (0b001 << 0) || (IRbit & RIGHT) == (0b101 << 0)) && (IRbit & (1 << 5))) {
		//우측 3개 비트
		return 4;
     ac2:	11 c0       	rjmp	.+34     	; 0xae6 <MODE3+0x300>
     ac4:	c2 e0       	ldi	r28, 0x02	; 2
     ac6:	d0 e0       	ldi	r29, 0x00	; 0
		else if (sec <= 1) {//PSD 꺼졌을때(2구간 처음 진입할때)
			return 8;
		}
		return 5;
	}
	return 2; // 기본값 (에러)
     ac8:	0e c0       	rjmp	.+28     	; 0xae6 <MODE3+0x300>
     aca:	c7 e0       	ldi	r28, 0x07	; 7
     acc:	d0 e0       	ldi	r29, 0x00	; 0
		if (enablePSD == 1) {
			utillizePSD(0);
			utillizePSD(1);
			if (sec < 9) {//벽타기
				if (utillizePSD(0) > 21) {//가까우면
					return 7;
     ace:	0b c0       	rjmp	.+22     	; 0xae6 <MODE3+0x300>
     ad0:	c5 e0       	ldi	r28, 0x05	; 5
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
				}
				else if (utillizePSD(0) < 16 && utillizePSD(0) > 10) {//멀면
					return 8;
				}
				else {
					return 5;//예외 처리
     ad4:	08 c0       	rjmp	.+16     	; 0xae6 <MODE3+0x300>
     ad6:	c5 e0       	ldi	r28, 0x05	; 5
     ad8:	d0 e0       	ldi	r29, 0x00	; 0
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <MODE3+0x300>
     adc:	c5 e0       	ldi	r28, 0x05	; 5
     ade:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		else if (sec <= 1) {//PSD 꺼졌을때(2구간 처음 진입할때)
			return 8;
		}
		return 5;
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <MODE3+0x300>
     ae2:	c5 e0       	ldi	r28, 0x05	; 5
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
     ae6:	ce 01       	movw	r24, r28
     ae8:	df 91       	pop	r29
	}
	return 2; // 기본값 (에러)
}
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <MODE4>:
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
	unsigned int CENTER = ((1 << (4 - 1 + 1)) - 1) << 1; // 가운데 4개 비트
	unsigned int RIGHT = ((1 << (2 - 0 + 1)) - 1) << 0; // 우측 3개 비트
	unsigned int LEFT = ((1 << (5 - 3 + 1)) - 1) << 3; // 좌측 3개 비트
	//ㅓ, ㅏ, ㅜ 모양에서 회전을 해야 하기 때문에 우회전 조건과 좌회전 조건을 높은 우선순위에 둠
	
 if (((IRbit & LEFT) == (0b011 << 3) || (IRbit & LEFT) == (0b001 << 3) || (IRbit & LEFT) == (0b000 << 3)
     af2:	9c 01       	movw	r18, r24
     af4:	28 73       	andi	r18, 0x38	; 56
     af6:	33 27       	eor	r19, r19
     af8:	28 31       	cpi	r18, 0x18	; 24
     afa:	31 05       	cpc	r19, r1
     afc:	49 f0       	breq	.+18     	; 0xb10 <MODE4+0x22>
     afe:	28 30       	cpi	r18, 0x08	; 8
     b00:	31 05       	cpc	r19, r1
     b02:	31 f0       	breq	.+12     	; 0xb10 <MODE4+0x22>
     b04:	21 15       	cp	r18, r1
     b06:	31 05       	cpc	r19, r1
     b08:	19 f0       	breq	.+6      	; 0xb10 <MODE4+0x22>
|| (IRbit & LEFT) == (0b101 << 3)) && (IRbit & (1 << 0))) {
     b0a:	28 32       	cpi	r18, 0x28	; 40
     b0c:	31 05       	cpc	r19, r1
     b0e:	11 f4       	brne	.+4      	; 0xb14 <MODE4+0x26>
     b10:	80 fd       	sbrc	r24, 0
     b12:	77 c0       	rjmp	.+238    	; 0xc02 <MODE4+0x114>
	// 좌측 3개 비트
	return 31;

} else if ((((IRbit & RIGHT) == (0b110 << 0) || (IRbit & RIGHT) == (0b100 << 0) || (IRbit & RIGHT) == (0b000 << 0))
     b14:	9c 01       	movw	r18, r24
     b16:	27 70       	andi	r18, 0x07	; 7
     b18:	33 27       	eor	r19, r19
     b1a:	26 30       	cpi	r18, 0x06	; 6
     b1c:	31 05       	cpc	r19, r1
     b1e:	61 f0       	breq	.+24     	; 0xb38 <MODE4+0x4a>
     b20:	24 30       	cpi	r18, 0x04	; 4
     b22:	31 05       	cpc	r19, r1
     b24:	49 f0       	breq	.+18     	; 0xb38 <MODE4+0x4a>
     b26:	21 15       	cp	r18, r1
     b28:	31 05       	cpc	r19, r1
     b2a:	31 f0       	breq	.+12     	; 0xb38 <MODE4+0x4a>
|| (IRbit & RIGHT) == (0b001 << 0) || (IRbit & RIGHT) == (0b101 << 0)) && (IRbit & (1 << 5))) {
     b2c:	21 30       	cpi	r18, 0x01	; 1
     b2e:	31 05       	cpc	r19, r1
     b30:	19 f0       	breq	.+6      	; 0xb38 <MODE4+0x4a>
     b32:	25 30       	cpi	r18, 0x05	; 5
     b34:	31 05       	cpc	r19, r1
     b36:	11 f4       	brne	.+4      	; 0xb3c <MODE4+0x4e>
     b38:	85 fd       	sbrc	r24, 5
     b3a:	66 c0       	rjmp	.+204    	; 0xc08 <MODE4+0x11a>
	//우측 3개 비트
	return 41;
	
	}else if ((((IRbit & CENTER) == (0b0100 << 1) ||
     b3c:	9c 01       	movw	r18, r24
     b3e:	2e 71       	andi	r18, 0x1E	; 30
     b40:	33 27       	eor	r19, r19
     b42:	28 30       	cpi	r18, 0x08	; 8
     b44:	31 05       	cpc	r19, r1
     b46:	91 f0       	breq	.+36     	; 0xb6c <MODE4+0x7e>
     b48:	24 30       	cpi	r18, 0x04	; 4
     b4a:	31 05       	cpc	r19, r1
     b4c:	79 f0       	breq	.+30     	; 0xb6c <MODE4+0x7e>
	(IRbit & CENTER) == (0b0010 << 1) || (IRbit & CENTER) == (0b0110 << 1) || (IRbit & CENTER) == (0b0000 << 1)
     b4e:	2c 30       	cpi	r18, 0x0C	; 12
     b50:	31 05       	cpc	r19, r1
     b52:	61 f0       	breq	.+24     	; 0xb6c <MODE4+0x7e>
     b54:	21 15       	cp	r18, r1
     b56:	31 05       	cpc	r19, r1
     b58:	49 f0       	breq	.+18     	; 0xb6c <MODE4+0x7e>
	|| (IRbit & CENTER) == (0b0100 << 1)|| (IRbit & CENTER) == (0b0111 << 1)|| (IRbit & CENTER) == (0b1110 << 1))
     b5a:	28 30       	cpi	r18, 0x08	; 8
     b5c:	31 05       	cpc	r19, r1
     b5e:	31 f0       	breq	.+12     	; 0xb6c <MODE4+0x7e>
     b60:	2e 30       	cpi	r18, 0x0E	; 14
     b62:	31 05       	cpc	r19, r1
     b64:	19 f0       	breq	.+6      	; 0xb6c <MODE4+0x7e>
     b66:	2c 31       	cpi	r18, 0x1C	; 28
     b68:	31 05       	cpc	r19, r1
     b6a:	51 f5       	brne	.+84     	; 0xbc0 <MODE4+0xd2>
	&& !(IRbit & (1 << 5)) && !(IRbit & (1 << 0)))) {
     b6c:	85 fd       	sbrc	r24, 5
     b6e:	28 c0       	rjmp	.+80     	; 0xbc0 <MODE4+0xd2>
     b70:	80 fd       	sbrc	r24, 0
     b72:	26 c0       	rjmp	.+76     	; 0xbc0 <MODE4+0xd2>
		//반전색 선 인식
		//가로줄 인식->일단정지 후 차단기 올라가면 전진
		//가운데 이상한 거 껴있으면 후진
		if((IRbit & CENTER) == (0b0000 << 1) && sec < 3 && enablePSD == 1){
     b74:	21 15       	cp	r18, r1
     b76:	31 05       	cpc	r19, r1
     b78:	c1 f4       	brne	.+48     	; 0xbaa <MODE4+0xbc>
     b7a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
     b7e:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     b82:	03 97       	sbiw	r24, 0x03	; 3
     b84:	94 f4       	brge	.+36     	; 0xbaa <MODE4+0xbc>
     b86:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <enablePSD>
     b8a:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <enablePSD+0x1>
     b8e:	c1 30       	cpi	r28, 0x01	; 1
     b90:	d1 05       	cpc	r29, r1
     b92:	59 f4       	brne	.+22     	; 0xbaa <MODE4+0xbc>
			if(utillizePSD(1) > 30){
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	6f dc       	rcall	.-1826   	; 0x478 <utillizePSD>
     b9a:	4f 97       	sbiw	r24, 0x1f	; 31
     b9c:	c0 f5       	brcc	.+112    	; 0xc0e <MODE4+0x120>
				return 9;
			}else if(utillizePSD(1) <= 30){
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	6a dc       	rcall	.-1836   	; 0x478 <utillizePSD>
     ba4:	4f 97       	sbiw	r24, 0x1f	; 31
     ba6:	b0 f5       	brcc	.+108    	; 0xc14 <MODE4+0x126>
     ba8:	43 c0       	rjmp	.+134    	; 0xc30 <MODE4+0x142>
				return 1;
			}
		}else if((IRbit & CENTER) == (0b0000 << 1) && sec >=3){
     baa:	23 2b       	or	r18, r19
     bac:	b1 f5       	brne	.+108    	; 0xc1a <MODE4+0x12c>
     bae:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
     bb2:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
     bb6:	03 97       	sbiw	r24, 0x03	; 3
     bb8:	9c f5       	brge	.+102    	; 0xc20 <MODE4+0x132>
			return 1;
		}else{
			return 2;
     bba:	c2 e0       	ldi	r28, 0x02	; 2
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	38 c0       	rjmp	.+112    	; 0xc30 <MODE4+0x142>
		}
	} else if (((IRbit & CENTER) == (0b1011 << 1) ||
     bc0:	26 31       	cpi	r18, 0x16	; 22
     bc2:	31 05       	cpc	r19, r1
     bc4:	a9 f0       	breq	.+42     	; 0xbf0 <MODE4+0x102>
     bc6:	2a 31       	cpi	r18, 0x1A	; 26
     bc8:	31 05       	cpc	r19, r1
     bca:	91 f0       	breq	.+36     	; 0xbf0 <MODE4+0x102>
	(IRbit & CENTER) == (0b1101 << 1) || (IRbit & CENTER) == (0b0000 << 1) ||
     bcc:	21 15       	cp	r18, r1
     bce:	31 05       	cpc	r19, r1
     bd0:	79 f0       	breq	.+30     	; 0xbf0 <MODE4+0x102>
     bd2:	22 31       	cpi	r18, 0x12	; 18
     bd4:	31 05       	cpc	r19, r1
     bd6:	61 f0       	breq	.+24     	; 0xbf0 <MODE4+0x102>
	(IRbit & CENTER) == (0b1001 << 1) || (IRbit & CENTER) == (0b1100 << 1) ||
     bd8:	28 31       	cpi	r18, 0x18	; 24
     bda:	31 05       	cpc	r19, r1
     bdc:	49 f0       	breq	.+18     	; 0xbf0 <MODE4+0x102>
     bde:	26 30       	cpi	r18, 0x06	; 6
     be0:	31 05       	cpc	r19, r1
     be2:	31 f0       	breq	.+12     	; 0xbf0 <MODE4+0x102>
	(IRbit & CENTER) == (0b0011 << 1) || (IRbit & CENTER) == (0b0001 << 1) ||
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	19 f0       	breq	.+6      	; 0xbf0 <MODE4+0x102>
     bea:	20 31       	cpi	r18, 0x10	; 16
     bec:	31 05       	cpc	r19, r1
     bee:	21 f4       	brne	.+8      	; 0xbf8 <MODE4+0x10a>
	(IRbit & CENTER) == (0b1000 << 1)) && (IRbit & (1 << 5)) && (IRbit & (1 << 0))) {
     bf0:	85 ff       	sbrs	r24, 5
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <MODE4+0x10a>
     bf4:	80 fd       	sbrc	r24, 0
     bf6:	17 c0       	rjmp	.+46     	; 0xc26 <MODE4+0x138>
		// 가운데 줄 인식 - 직진
		return 1;
		
	} else if ((IRbit) == 0b111111) {
     bf8:	cf 97       	sbiw	r24, 0x3f	; 63
     bfa:	c1 f4       	brne	.+48     	; 0xc2c <MODE4+0x13e>
		// 아무것도 인식 못할 때
		//T자 구간 유턴
			return 42;
     bfc:	ca e2       	ldi	r28, 0x2A	; 42
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
     c00:	17 c0       	rjmp	.+46     	; 0xc30 <MODE4+0x142>
	//ㅓ, ㅏ, ㅜ 모양에서 회전을 해야 하기 때문에 우회전 조건과 좌회전 조건을 높은 우선순위에 둠
	
 if (((IRbit & LEFT) == (0b011 << 3) || (IRbit & LEFT) == (0b001 << 3) || (IRbit & LEFT) == (0b000 << 3)
|| (IRbit & LEFT) == (0b101 << 3)) && (IRbit & (1 << 0))) {
	// 좌측 3개 비트
	return 31;
     c02:	cf e1       	ldi	r28, 0x1F	; 31
     c04:	d0 e0       	ldi	r29, 0x00	; 0
     c06:	14 c0       	rjmp	.+40     	; 0xc30 <MODE4+0x142>

} else if ((((IRbit & RIGHT) == (0b110 << 0) || (IRbit & RIGHT) == (0b100 << 0) || (IRbit & RIGHT) == (0b000 << 0))
|| (IRbit & RIGHT) == (0b001 << 0) || (IRbit & RIGHT) == (0b101 << 0)) && (IRbit & (1 << 5))) {
	//우측 3개 비트
	return 41;
     c08:	c9 e2       	ldi	r28, 0x29	; 41
     c0a:	d0 e0       	ldi	r29, 0x00	; 0
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <MODE4+0x142>
		//반전색 선 인식
		//가로줄 인식->일단정지 후 차단기 올라가면 전진
		//가운데 이상한 거 껴있으면 후진
		if((IRbit & CENTER) == (0b0000 << 1) && sec < 3 && enablePSD == 1){
			if(utillizePSD(1) > 30){
				return 9;
     c0e:	c9 e0       	ldi	r28, 0x09	; 9
     c10:	d0 e0       	ldi	r29, 0x00	; 0
     c12:	0e c0       	rjmp	.+28     	; 0xc30 <MODE4+0x142>
	} else if ((IRbit) == 0b111111) {
		// 아무것도 인식 못할 때
		//T자 구간 유턴
			return 42;
	}
	return 2; // 기본값 (에러)
     c14:	c2 e0       	ldi	r28, 0x02	; 2
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	0b c0       	rjmp	.+22     	; 0xc30 <MODE4+0x142>
				return 1;
			}
		}else if((IRbit & CENTER) == (0b0000 << 1) && sec >=3){
			return 1;
		}else{
			return 2;
     c1a:	c2 e0       	ldi	r28, 0x02	; 2
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
     c1e:	08 c0       	rjmp	.+16     	; 0xc30 <MODE4+0x142>
				return 9;
			}else if(utillizePSD(1) <= 30){
				return 1;
			}
		}else if((IRbit & CENTER) == (0b0000 << 1) && sec >=3){
			return 1;
     c20:	c1 e0       	ldi	r28, 0x01	; 1
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <MODE4+0x142>
	(IRbit & CENTER) == (0b1101 << 1) || (IRbit & CENTER) == (0b0000 << 1) ||
	(IRbit & CENTER) == (0b1001 << 1) || (IRbit & CENTER) == (0b1100 << 1) ||
	(IRbit & CENTER) == (0b0011 << 1) || (IRbit & CENTER) == (0b0001 << 1) ||
	(IRbit & CENTER) == (0b1000 << 1)) && (IRbit & (1 << 5)) && (IRbit & (1 << 0))) {
		// 가운데 줄 인식 - 직진
		return 1;
     c26:	c1 e0       	ldi	r28, 0x01	; 1
     c28:	d0 e0       	ldi	r29, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <MODE4+0x142>
	} else if ((IRbit) == 0b111111) {
		// 아무것도 인식 못할 때
		//T자 구간 유턴
			return 42;
	}
	return 2; // 기본값 (에러)
     c2c:	c2 e0       	ldi	r28, 0x02	; 2
     c2e:	d0 e0       	ldi	r29, 0x00	; 0
}
     c30:	ce 01       	movw	r24, r28
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <lineTrace>:


//맨 왼쪽 센서가 5번임, 선이 있는 곳이 0(LED 꺼짐)
int lineTrace(unsigned int IRbit) {
	if (MODE == 1){
     c38:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <MODE>
     c3c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <MODE+0x1>
     c40:	21 30       	cpi	r18, 0x01	; 1
     c42:	31 05       	cpc	r19, r1
     c44:	31 f4       	brne	.+12     	; 0xc52 <lineTrace+0x1a>
		motorstatus = MODE1(IRbit);
     c46:	45 dc       	rcall	.-1910   	; 0x4d2 <MODE1>
     c48:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c50:	1a c0       	rjmp	.+52     	; 0xc86 <lineTrace+0x4e>
	}else if(MODE == 2){
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	31 05       	cpc	r19, r1
		motorstatus = MODE2(IRbit);
     c56:	31 f4       	brne	.+12     	; 0xc64 <lineTrace+0x2c>
     c58:	f4 dc       	rcall	.-1560   	; 0x642 <MODE2>
     c5a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c5e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c62:	11 c0       	rjmp	.+34     	; 0xc86 <lineTrace+0x4e>
	}else if(MODE == 3){
     c64:	23 30       	cpi	r18, 0x03	; 3
     c66:	31 05       	cpc	r19, r1
		motorstatus = MODE3(IRbit);
     c68:	31 f4       	brne	.+12     	; 0xc76 <lineTrace+0x3e>
     c6a:	bd dd       	rcall	.-1158   	; 0x7e6 <MODE3>
     c6c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c70:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <lineTrace+0x4e>
	}else if(MODE == 4){
     c76:	24 30       	cpi	r18, 0x04	; 4
     c78:	31 05       	cpc	r19, r1
		motorstatus = MODE4(IRbit);
     c7a:	29 f4       	brne	.+10     	; 0xc86 <lineTrace+0x4e>
     c7c:	38 df       	rcall	.-400    	; 0xaee <MODE4>
     c7e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c82:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	return 0;
}
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	08 95       	ret

00000c8c <readIRAndFilter>:

// 센서 데이터 읽기 및 필터링
void readIRAndFilter(void) {
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
	unsigned int sensor = 0;
	unsigned int sensorNormal = 0;

	PORTA = 0xFF; // 모든 LED 끄기
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	8b bb       	out	0x1b, r24	; 27
	bit = 0; // 비트 초기화
     c98:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
     c9c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>

	for (unsigned int i = 0; i < 6; i++) {
     ca0:	c0 e0       	ldi	r28, 0x00	; 0
     ca2:	d0 e0       	ldi	r29, 0x00	; 0
     ca4:	1b c1       	rjmp	.+566    	; 0xedc <readIRAndFilter+0x250>
		ADMUX = 0x41 + i; // ADC 채널 선택
     ca6:	8c 2f       	mov	r24, r28
     ca8:	8f 5b       	subi	r24, 0xBF	; 191
     caa:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= 0x40; // ADC 변환 시작
     cac:	86 b1       	in	r24, 0x06	; 6
     cae:	80 64       	ori	r24, 0x40	; 64
     cb0:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA & 0x10) == 0); // 변환 완료 대기
     cb2:	34 9b       	sbis	0x06, 4	; 6
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <readIRAndFilter+0x26>
		ADCSRA |= 0x10; // ADIF 플래그 클리어
     cb6:	86 b1       	in	r24, 0x06	; 6
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	86 b9       	out	0x06, r24	; 6

		// 현재 ADC 값을 버퍼에 저장
		IRBuffers[i][IRTemp[i]] = ADC;
     cbc:	8e 01       	movw	r16, r28
     cbe:	00 0f       	add	r16, r16
     cc0:	11 1f       	adc	r17, r17
     cc2:	a8 01       	movw	r20, r16
     cc4:	4a 5a       	subi	r20, 0xAA	; 170
     cc6:	5e 4f       	sbci	r21, 0xFE	; 254
     cc8:	fa 01       	movw	r30, r20
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	24 b1       	in	r18, 0x04	; 4
     cd0:	35 b1       	in	r19, 0x05	; 5
     cd2:	fe 01       	movw	r30, r28
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	ec 0f       	add	r30, r28
     cde:	fd 1f       	adc	r31, r29
     ce0:	e8 0f       	add	r30, r24
     ce2:	f9 1f       	adc	r31, r25
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 59       	subi	r30, 0x9E	; 158
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	31 83       	std	Z+1, r19	; 0x01
     cee:	20 83       	st	Z, r18
		IRTemp[i] = (IRTemp[i] + 1) % BUFFER_SIZE;
     cf0:	fc 01       	movw	r30, r24
     cf2:	31 96       	adiw	r30, 0x01	; 1
     cf4:	9f 01       	movw	r18, r30
     cf6:	ad ec       	ldi	r26, 0xCD	; 205
     cf8:	bc ec       	ldi	r27, 0xCC	; 204
     cfa:	ff d5       	rcall	.+3070   	; 0x18fa <__umulhisi3>
     cfc:	96 95       	lsr	r25
     cfe:	87 95       	ror	r24
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	9c 01       	movw	r18, r24
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	82 0f       	add	r24, r18
     d10:	93 1f       	adc	r25, r19
     d12:	9f 01       	movw	r18, r30
     d14:	28 1b       	sub	r18, r24
     d16:	39 0b       	sbc	r19, r25
     d18:	fa 01       	movw	r30, r20
     d1a:	31 83       	std	Z+1, r19	; 0x01
     d1c:	20 83       	st	Z, r18

		// 필터링된 ADC 값을 계산
		sensor = ADCFilter(i);
     d1e:	ce 01       	movw	r24, r28
     d20:	d3 da       	rcall	.-2650   	; 0x2c8 <ADCFilter>

		if (sensor < IRmin[i]) {
     d22:	f8 01       	movw	r30, r16
     d24:	ee 5f       	subi	r30, 0xFE	; 254
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	20 81       	ld	r18, Z
     d2a:	31 81       	ldd	r19, Z+1	; 0x01
     d2c:	82 17       	cp	r24, r18
     d2e:	93 07       	cpc	r25, r19
     d30:	28 f4       	brcc	.+10     	; 0xd3c <readIRAndFilter+0xb0>
			IRmin[i] = sensor;
     d32:	f8 01       	movw	r30, r16
     d34:	ee 5f       	subi	r30, 0xFE	; 254
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
		}
		if (sensor > IRmax[i]) {
     d3c:	fe 01       	movw	r30, r28
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	e8 5c       	subi	r30, 0xC8	; 200
     d44:	fe 4f       	sbci	r31, 0xFE	; 254
     d46:	20 81       	ld	r18, Z
     d48:	31 81       	ldd	r19, Z+1	; 0x01
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	38 f4       	brcc	.+14     	; 0xd5e <readIRAndFilter+0xd2>
			IRmax[i] = sensor;
     d50:	fe 01       	movw	r30, r28
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	e8 5c       	subi	r30, 0xC8	; 200
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
		}

		// 정규화된 값 계산
		if (IRmax[i] != IRmin[i]) {
     d5e:	9e 01       	movw	r18, r28
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	f9 01       	movw	r30, r18
     d66:	e8 5c       	subi	r30, 0xC8	; 200
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	f9 01       	movw	r30, r18
     d70:	ee 5f       	subi	r30, 0xFE	; 254
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	40 81       	ld	r20, Z
     d76:	51 81       	ldd	r21, Z+1	; 0x01
     d78:	64 17       	cp	r22, r20
     d7a:	75 07       	cpc	r23, r21
     d7c:	69 f0       	breq	.+26     	; 0xd98 <readIRAndFilter+0x10c>
			sensorNormal = (sensor - IRmin[i]) * 100 / (IRmax[i] - IRmin[i]);
     d7e:	9c 01       	movw	r18, r24
     d80:	24 1b       	sub	r18, r20
     d82:	35 0b       	sbc	r19, r21
     d84:	e4 e6       	ldi	r30, 0x64	; 100
     d86:	e2 9f       	mul	r30, r18
     d88:	c0 01       	movw	r24, r0
     d8a:	e3 9f       	mul	r30, r19
     d8c:	90 0d       	add	r25, r0
     d8e:	11 24       	eor	r1, r1
     d90:	64 1b       	sub	r22, r20
     d92:	75 0b       	sbc	r23, r21
     d94:	9e d5       	rcall	.+2876   	; 0x18d2 <__udivmodhi4>
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <readIRAndFilter+0x110>
			} else {
			sensorNormal = 0; // 최댓값과 최솟값이 동일할 경우 0으로 설정
     d98:	60 e0       	ldi	r22, 0x00	; 0
		}

		// 정규화된 값을 0~1 범위로 변환
		float sensorFinal = sensorNormal / 100.0;
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	7f d4       	rcall	.+2302   	; 0x16a0 <__floatunsisf>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	48 ec       	ldi	r20, 0xC8	; 200
     da8:	52 e4       	ldi	r21, 0x42	; 66
     daa:	e6 d3       	rcall	.+1996   	; 0x1578 <__divsf3>
	if (DFC == 1){
     dac:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <DFC>
     db0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <DFC+0x1>
     db4:	21 30       	cpi	r18, 0x01	; 1
     db6:	31 05       	cpc	r19, r1
     db8:	09 f0       	breq	.+2      	; 0xdbc <readIRAndFilter+0x130>
		if (sensorFinal >= 0.5) {
     dba:	48 c0       	rjmp	.+144    	; 0xe4c <readIRAndFilter+0x1c0>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	5f e3       	ldi	r21, 0x3F	; 63
     dc4:	1f d5       	rcall	.+2622   	; 0x1804 <__gesf2>
     dc6:	88 23       	and	r24, r24
     dc8:	04 f1       	brlt	.+64     	; 0xe0a <readIRAndFilter+0x17e>
			bit |= (1 << i); // 비트 설정
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9c 01       	movw	r18, r24
     dd0:	0c 2e       	mov	r0, r28
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <readIRAndFilter+0x14c>
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <readIRAndFilter+0x148>
     ddc:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
     de0:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <__data_end+0x1>
     de4:	24 2b       	or	r18, r20
     de6:	35 2b       	or	r19, r21
     de8:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
     dec:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
			PORTA &= ~(1 << (i + 1)); // 해당 LED만 켜기
     df0:	2b b3       	in	r18, 0x1b	; 27
     df2:	ae 01       	movw	r20, r28
     df4:	4f 5f       	subi	r20, 0xFF	; 255
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <readIRAndFilter+0x172>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	4a 95       	dec	r20
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <readIRAndFilter+0x16e>
     e02:	80 95       	com	r24
     e04:	82 23       	and	r24, r18
     e06:	8b bb       	out	0x1b, r24	; 27
     e08:	68 c0       	rjmp	.+208    	; 0xeda <readIRAndFilter+0x24e>
		}else{
			bit &= ~(1 << i); // 비트 설정
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9c 01       	movw	r18, r24
     e10:	0c 2e       	mov	r0, r28
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <readIRAndFilter+0x18c>
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <readIRAndFilter+0x188>
     e1c:	20 95       	com	r18
     e1e:	30 95       	com	r19
     e20:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
     e24:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <__data_end+0x1>
     e28:	24 23       	and	r18, r20
     e2a:	35 23       	and	r19, r21
     e2c:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
     e30:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
			PORTA |= (1 << (i + 1)); // 해당 LED만 끄기
     e34:	2b b3       	in	r18, 0x1b	; 27
     e36:	ae 01       	movw	r20, r28
     e38:	4f 5f       	subi	r20, 0xFF	; 255
     e3a:	5f 4f       	sbci	r21, 0xFF	; 255
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <readIRAndFilter+0x1b6>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	4a 95       	dec	r20
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <readIRAndFilter+0x1b2>
     e46:	82 2b       	or	r24, r18
     e48:	8b bb       	out	0x1b, r24	; 27
			}
	}else{
		if (sensorFinal < 0.5) {//배경색이 검은색
     e4a:	47 c0       	rjmp	.+142    	; 0xeda <readIRAndFilter+0x24e>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	5f e3       	ldi	r21, 0x3F	; 63
     e54:	8d d3       	rcall	.+1818   	; 0x1570 <__cmpsf2>
     e56:	88 23       	and	r24, r24
     e58:	04 f5       	brge	.+64     	; 0xe9a <readIRAndFilter+0x20e>
			bit |= (1 << i); // 비트 설정
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 01       	movw	r18, r24
     e60:	0c 2e       	mov	r0, r28
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <readIRAndFilter+0x1dc>
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <readIRAndFilter+0x1d8>
     e6c:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
     e70:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <__data_end+0x1>
     e74:	24 2b       	or	r18, r20
     e76:	35 2b       	or	r19, r21
     e78:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
     e7c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
			PORTA &= ~(1 << (i + 1)); // 해당 LED만 켜기
     e80:	2b b3       	in	r18, 0x1b	; 27
     e82:	ae 01       	movw	r20, r28
     e84:	4f 5f       	subi	r20, 0xFF	; 255
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <readIRAndFilter+0x202>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	4a 95       	dec	r20
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <readIRAndFilter+0x1fe>
     e92:	80 95       	com	r24
     e94:	82 23       	and	r24, r18
     e96:	8b bb       	out	0x1b, r24	; 27
     e98:	20 c0       	rjmp	.+64     	; 0xeda <readIRAndFilter+0x24e>
		}else{
			bit &= ~(1 << i); // 비트 설정
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 01       	movw	r18, r24
     ea0:	0c 2e       	mov	r0, r28
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <readIRAndFilter+0x21c>
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <readIRAndFilter+0x218>
     eac:	20 95       	com	r18
     eae:	30 95       	com	r19
     eb0:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
     eb4:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <__data_end+0x1>
     eb8:	24 23       	and	r18, r20
     eba:	35 23       	and	r19, r21
     ebc:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
     ec0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
			PORTA |= (1 << (i + 1)); // 해당 LED만 끄기
     ec4:	2b b3       	in	r18, 0x1b	; 27
     ec6:	ae 01       	movw	r20, r28
     ec8:	4f 5f       	subi	r20, 0xFF	; 255
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <readIRAndFilter+0x246>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	4a 95       	dec	r20
     ed4:	e2 f7       	brpl	.-8      	; 0xece <readIRAndFilter+0x242>
     ed6:	82 2b       	or	r24, r18
     ed8:	8b bb       	out	0x1b, r24	; 27
	unsigned int sensorNormal = 0;

	PORTA = 0xFF; // 모든 LED 끄기
	bit = 0; // 비트 초기화

	for (unsigned int i = 0; i < 6; i++) {
     eda:	21 96       	adiw	r28, 0x01	; 1
     edc:	c6 30       	cpi	r28, 0x06	; 6
     ede:	d1 05       	cpc	r29, r1
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <readIRAndFilter+0x258>
     ee2:	e1 ce       	rjmp	.-574    	; 0xca6 <readIRAndFilter+0x1a>
			bit &= ~(1 << i); // 비트 설정
			PORTA |= (1 << (i + 1)); // 해당 LED만 끄기
			}
		}
	}
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <updateLCD>:

// LCD 업데이트
void updateLCD(void) {
	lcdNumber(0, 6, sec);
     eee:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <sec>
     ef2:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <sec+0x1>
     ef6:	66 e0       	ldi	r22, 0x06	; 6
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	7a d9       	rcall	.-3340   	; 0x1f0 <lcdNumber>
	lcdNumber(1, 7, motorstatus);
     efc:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f00:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f04:	67 e0       	ldi	r22, 0x07	; 7
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	73 d9       	rcall	.-3354   	; 0x1f0 <lcdNumber>
	if(enablePSD == 0){
     f0a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <enablePSD>
     f0e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <enablePSD+0x1>
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	31 f4       	brne	.+12     	; 0xf22 <updateLCD+0x34>
		lcdString(0, 10, "x");
     f16:	41 e3       	ldi	r20, 0x31	; 49
     f18:	51 e0       	ldi	r21, 0x01	; 1
     f1a:	6a e0       	ldi	r22, 0x0A	; 10
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	5b d9       	rcall	.-3402   	; 0x1d6 <lcdString>
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <updateLCD+0x42>
		}else if(enablePSD == 1){
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	29 f4       	brne	.+10     	; 0xf30 <updateLCD+0x42>
		lcdString(0, 10, "o");
     f26:	43 e3       	ldi	r20, 0x33	; 51
     f28:	51 e0       	ldi	r21, 0x01	; 1
     f2a:	6a e0       	ldi	r22, 0x0A	; 10
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	53 d9       	rcall	.-3418   	; 0x1d6 <lcdString>
	}
	lcdNumber(1, 14, MODE);
     f30:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <MODE>
     f34:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <MODE+0x1>
     f38:	6e e0       	ldi	r22, 0x0E	; 14
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	59 c9       	rjmp	.-3406   	; 0x1f0 <lcdNumber>
     f3e:	08 95       	ret

00000f40 <controlMotors>:
}


// 모터 제어
void controlMotors(void) {
	if (motorstatus == 1) { // 전진
     f40:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f44:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	f9 f4       	brne	.+62     	; 0xf8c <controlMotors+0x4c>
		PORTB = (PORTB & 0xF0) | 0x05;
     f4e:	88 b3       	in	r24, 0x18	; 24
     f50:	80 7f       	andi	r24, 0xF0	; 240
     f52:	85 60       	ori	r24, 0x05	; 5
     f54:	88 bb       	out	0x18, r24	; 24
		OCR1A = ICR1 * 0.3;
     f56:	66 b5       	in	r22, 0x26	; 38
     f58:	77 b5       	in	r23, 0x27	; 39
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 d3       	rcall	.+1856   	; 0x16a0 <__floatunsisf>
     f60:	2a e9       	ldi	r18, 0x9A	; 154
     f62:	39 e9       	ldi	r19, 0x99	; 153
     f64:	49 e9       	ldi	r20, 0x99	; 153
     f66:	5e e3       	ldi	r21, 0x3E	; 62
     f68:	51 d4       	rcall	.+2210   	; 0x180c <__mulsf3>
     f6a:	6e d3       	rcall	.+1756   	; 0x1648 <__fixunssfsi>
     f6c:	7b bd       	out	0x2b, r23	; 43
     f6e:	6a bd       	out	0x2a, r22	; 42
		OCR1B = ICR1 * 0.3;
     f70:	66 b5       	in	r22, 0x26	; 38
     f72:	77 b5       	in	r23, 0x27	; 39
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	93 d3       	rcall	.+1830   	; 0x16a0 <__floatunsisf>
     f7a:	2a e9       	ldi	r18, 0x9A	; 154
     f7c:	39 e9       	ldi	r19, 0x99	; 153
     f7e:	49 e9       	ldi	r20, 0x99	; 153
     f80:	5e e3       	ldi	r21, 0x3E	; 62
     f82:	44 d4       	rcall	.+2184   	; 0x180c <__mulsf3>
     f84:	61 d3       	rcall	.+1730   	; 0x1648 <__fixunssfsi>
     f86:	79 bd       	out	0x29, r23	; 41
     f88:	68 bd       	out	0x28, r22	; 40
     f8a:	08 95       	ret
		} else if (motorstatus == 2) { // 후진
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	91 05       	cpc	r25, r1
     f90:	f9 f4       	brne	.+62     	; 0xfd0 <controlMotors+0x90>
		PORTB = (PORTB & 0xF0) | 0x0A;
     f92:	88 b3       	in	r24, 0x18	; 24
     f94:	80 7f       	andi	r24, 0xF0	; 240
     f96:	8a 60       	ori	r24, 0x0A	; 10
		OCR1A = ICR1 * 0.1;
     f98:	88 bb       	out	0x18, r24	; 24
     f9a:	66 b5       	in	r22, 0x26	; 38
     f9c:	77 b5       	in	r23, 0x27	; 39
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	7e d3       	rcall	.+1788   	; 0x16a0 <__floatunsisf>
     fa4:	2d ec       	ldi	r18, 0xCD	; 205
     fa6:	3c ec       	ldi	r19, 0xCC	; 204
     fa8:	4c ec       	ldi	r20, 0xCC	; 204
     faa:	5d e3       	ldi	r21, 0x3D	; 61
     fac:	2f d4       	rcall	.+2142   	; 0x180c <__mulsf3>
     fae:	4c d3       	rcall	.+1688   	; 0x1648 <__fixunssfsi>
     fb0:	7b bd       	out	0x2b, r23	; 43
		OCR1B = ICR1 * 0.1;
     fb2:	6a bd       	out	0x2a, r22	; 42
     fb4:	66 b5       	in	r22, 0x26	; 38
     fb6:	77 b5       	in	r23, 0x27	; 39
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	71 d3       	rcall	.+1762   	; 0x16a0 <__floatunsisf>
     fbe:	2d ec       	ldi	r18, 0xCD	; 205
     fc0:	3c ec       	ldi	r19, 0xCC	; 204
     fc2:	4c ec       	ldi	r20, 0xCC	; 204
     fc4:	5d e3       	ldi	r21, 0x3D	; 61
     fc6:	22 d4       	rcall	.+2116   	; 0x180c <__mulsf3>
     fc8:	3f d3       	rcall	.+1662   	; 0x1648 <__fixunssfsi>
     fca:	79 bd       	out	0x29, r23	; 41
     fcc:	68 bd       	out	0x28, r22	; 40
     fce:	08 95       	ret
		} else if (motorstatus == 3) { // 좌회전
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	91 05       	cpc	r25, r1
     fd4:	f9 f4       	brne	.+62     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
		PORTB = (PORTB & 0xF0) | 0x06;
     fd6:	88 b3       	in	r24, 0x18	; 24
     fd8:	80 7f       	andi	r24, 0xF0	; 240
		OCR1A = ICR1 * 0.1;
     fda:	86 60       	ori	r24, 0x06	; 6
     fdc:	88 bb       	out	0x18, r24	; 24
     fde:	66 b5       	in	r22, 0x26	; 38
     fe0:	77 b5       	in	r23, 0x27	; 39
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	5c d3       	rcall	.+1720   	; 0x16a0 <__floatunsisf>
     fe8:	2d ec       	ldi	r18, 0xCD	; 205
     fea:	3c ec       	ldi	r19, 0xCC	; 204
     fec:	4c ec       	ldi	r20, 0xCC	; 204
     fee:	5d e3       	ldi	r21, 0x3D	; 61
     ff0:	0d d4       	rcall	.+2074   	; 0x180c <__mulsf3>
     ff2:	2a d3       	rcall	.+1620   	; 0x1648 <__fixunssfsi>
		OCR1B = ICR1 * 0.5;
     ff4:	7b bd       	out	0x2b, r23	; 43
     ff6:	6a bd       	out	0x2a, r22	; 42
     ff8:	66 b5       	in	r22, 0x26	; 38
     ffa:	77 b5       	in	r23, 0x27	; 39
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	4f d3       	rcall	.+1694   	; 0x16a0 <__floatunsisf>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	00 d4       	rcall	.+2048   	; 0x180c <__mulsf3>
    100c:	1d d3       	rcall	.+1594   	; 0x1648 <__fixunssfsi>
    100e:	79 bd       	out	0x29, r23	; 41
    1010:	68 bd       	out	0x28, r22	; 40
		} else if (motorstatus == 3) { // 제자리 좌회전 90도-아다리 맞춰놓기!!!
    1012:	08 95       	ret
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
		PORTB = (PORTB & 0xF0) | 0x06;
    1018:	41 f5       	brne	.+80     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
    101a:	88 b3       	in	r24, 0x18	; 24
    101c:	80 7f       	andi	r24, 0xF0	; 240
		OCR1A = ICR1 * 0.4;
    101e:	86 60       	ori	r24, 0x06	; 6
    1020:	88 bb       	out	0x18, r24	; 24
    1022:	66 b5       	in	r22, 0x26	; 38
    1024:	77 b5       	in	r23, 0x27	; 39
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	3a d3       	rcall	.+1652   	; 0x16a0 <__floatunsisf>
    102c:	2d ec       	ldi	r18, 0xCD	; 205
    102e:	3c ec       	ldi	r19, 0xCC	; 204
    1030:	4c ec       	ldi	r20, 0xCC	; 204
    1032:	5e e3       	ldi	r21, 0x3E	; 62
    1034:	eb d3       	rcall	.+2006   	; 0x180c <__mulsf3>
    1036:	08 d3       	rcall	.+1552   	; 0x1648 <__fixunssfsi>
    1038:	7b bd       	out	0x2b, r23	; 43
		OCR1B = ICR1 * 0.4;
    103a:	6a bd       	out	0x2a, r22	; 42
    103c:	66 b5       	in	r22, 0x26	; 38
    103e:	77 b5       	in	r23, 0x27	; 39
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	2d d3       	rcall	.+1626   	; 0x16a0 <__floatunsisf>
    1046:	2d ec       	ldi	r18, 0xCD	; 205
    1048:	3c ec       	ldi	r19, 0xCC	; 204
    104a:	4c ec       	ldi	r20, 0xCC	; 204
    104c:	5e e3       	ldi	r21, 0x3E	; 62
    104e:	de d3       	rcall	.+1980   	; 0x180c <__mulsf3>
    1050:	fb d2       	rcall	.+1526   	; 0x1648 <__fixunssfsi>
    1052:	79 bd       	out	0x29, r23	; 41
    1054:	68 bd       	out	0x28, r22	; 40
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	89 e6       	ldi	r24, 0x69	; 105
    105a:	98 e1       	ldi	r25, 0x18	; 24
    105c:	21 50       	subi	r18, 0x01	; 1
    105e:	80 40       	sbci	r24, 0x00	; 0
    1060:	90 40       	sbci	r25, 0x00	; 0
    1062:	e1 f7       	brne	.-8      	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    1066:	00 00       	nop
		_delay_ms(500);
		} else if (motorstatus == 4) { // 우회전
    1068:	08 95       	ret
    106a:	84 30       	cpi	r24, 0x04	; 4
		PORTB = (PORTB & 0xF0) | 0x09;
    106c:	91 05       	cpc	r25, r1
    106e:	f9 f4       	brne	.+62     	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
    1070:	88 b3       	in	r24, 0x18	; 24
		OCR1A = ICR1 * 0.5;
    1072:	80 7f       	andi	r24, 0xF0	; 240
    1074:	89 60       	ori	r24, 0x09	; 9
    1076:	88 bb       	out	0x18, r24	; 24
    1078:	66 b5       	in	r22, 0x26	; 38
    107a:	77 b5       	in	r23, 0x27	; 39
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0f d3       	rcall	.+1566   	; 0x16a0 <__floatunsisf>
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	c0 d3       	rcall	.+1920   	; 0x180c <__mulsf3>
    108c:	dd d2       	rcall	.+1466   	; 0x1648 <__fixunssfsi>
    108e:	7b bd       	out	0x2b, r23	; 43
		OCR1B = ICR1 * 0.1;
    1090:	6a bd       	out	0x2a, r22	; 42
    1092:	66 b5       	in	r22, 0x26	; 38
    1094:	77 b5       	in	r23, 0x27	; 39
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 d3       	rcall	.+1540   	; 0x16a0 <__floatunsisf>
    109c:	2d ec       	ldi	r18, 0xCD	; 205
    109e:	3c ec       	ldi	r19, 0xCC	; 204
    10a0:	4c ec       	ldi	r20, 0xCC	; 204
    10a2:	5d e3       	ldi	r21, 0x3D	; 61
    10a4:	b3 d3       	rcall	.+1894   	; 0x180c <__mulsf3>
    10a6:	d0 d2       	rcall	.+1440   	; 0x1648 <__fixunssfsi>
    10a8:	79 bd       	out	0x29, r23	; 41
    10aa:	68 bd       	out	0x28, r22	; 40
		} else if (motorstatus == 41) { // 제자리 우회전 90도-아다리 맞춰놓기!!!
    10ac:	08 95       	ret
    10ae:	89 32       	cpi	r24, 0x29	; 41
		PORTB = (PORTB & 0xF0) | 0x09;
    10b0:	91 05       	cpc	r25, r1
    10b2:	41 f5       	brne	.+80     	; 0x1104 <__stack+0x5>
    10b4:	88 b3       	in	r24, 0x18	; 24
    10b6:	80 7f       	andi	r24, 0xF0	; 240
		OCR1A = ICR1 * 0.4;
    10b8:	89 60       	ori	r24, 0x09	; 9
    10ba:	88 bb       	out	0x18, r24	; 24
    10bc:	66 b5       	in	r22, 0x26	; 38
    10be:	77 b5       	in	r23, 0x27	; 39
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	ed d2       	rcall	.+1498   	; 0x16a0 <__floatunsisf>
    10c6:	2d ec       	ldi	r18, 0xCD	; 205
    10c8:	3c ec       	ldi	r19, 0xCC	; 204
    10ca:	4c ec       	ldi	r20, 0xCC	; 204
    10cc:	5e e3       	ldi	r21, 0x3E	; 62
    10ce:	9e d3       	rcall	.+1852   	; 0x180c <__mulsf3>
    10d0:	bb d2       	rcall	.+1398   	; 0x1648 <__fixunssfsi>
    10d2:	7b bd       	out	0x2b, r23	; 43
    10d4:	6a bd       	out	0x2a, r22	; 42
    10d6:	66 b5       	in	r22, 0x26	; 38
		OCR1B = ICR1 * 0.4;
    10d8:	77 b5       	in	r23, 0x27	; 39
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	e0 d2       	rcall	.+1472   	; 0x16a0 <__floatunsisf>
    10e0:	2d ec       	ldi	r18, 0xCD	; 205
    10e2:	3c ec       	ldi	r19, 0xCC	; 204
    10e4:	4c ec       	ldi	r20, 0xCC	; 204
    10e6:	5e e3       	ldi	r21, 0x3E	; 62
    10e8:	91 d3       	rcall	.+1826   	; 0x180c <__mulsf3>
    10ea:	ae d2       	rcall	.+1372   	; 0x1648 <__fixunssfsi>
    10ec:	79 bd       	out	0x29, r23	; 41
    10ee:	68 bd       	out	0x28, r22	; 40
    10f0:	2f ef       	ldi	r18, 0xFF	; 255
    10f2:	89 e6       	ldi	r24, 0x69	; 105
    10f4:	98 e1       	ldi	r25, 0x18	; 24
    10f6:	21 50       	subi	r18, 0x01	; 1
    10f8:	80 40       	sbci	r24, 0x00	; 0
    10fa:	90 40       	sbci	r25, 0x00	; 0
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <__stack+0x1>
    1100:	00 00       	nop
		_delay_ms(500);
		} else if (motorstatus == 42) { // 제자리 우회전 180도-아다리 맞춰놓기!!!
    1102:	08 95       	ret
    1104:	8a 32       	cpi	r24, 0x2A	; 42
    1106:	91 05       	cpc	r25, r1
		PORTB = (PORTB & 0xF0) | 0x09;
    1108:	41 f5       	brne	.+80     	; 0x115a <__stack+0x5b>
    110a:	88 b3       	in	r24, 0x18	; 24
    110c:	80 7f       	andi	r24, 0xF0	; 240
    110e:	89 60       	ori	r24, 0x09	; 9
		OCR1A = ICR1 * 0.4;
    1110:	88 bb       	out	0x18, r24	; 24
    1112:	66 b5       	in	r22, 0x26	; 38
    1114:	77 b5       	in	r23, 0x27	; 39
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	c2 d2       	rcall	.+1412   	; 0x16a0 <__floatunsisf>
    111c:	2d ec       	ldi	r18, 0xCD	; 205
    111e:	3c ec       	ldi	r19, 0xCC	; 204
    1120:	4c ec       	ldi	r20, 0xCC	; 204
    1122:	5e e3       	ldi	r21, 0x3E	; 62
    1124:	73 d3       	rcall	.+1766   	; 0x180c <__mulsf3>
    1126:	90 d2       	rcall	.+1312   	; 0x1648 <__fixunssfsi>
    1128:	7b bd       	out	0x2b, r23	; 43
    112a:	6a bd       	out	0x2a, r22	; 42
    112c:	66 b5       	in	r22, 0x26	; 38
		OCR1B = ICR1 * 0.4;
    112e:	77 b5       	in	r23, 0x27	; 39
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	b5 d2       	rcall	.+1386   	; 0x16a0 <__floatunsisf>
    1136:	2d ec       	ldi	r18, 0xCD	; 205
    1138:	3c ec       	ldi	r19, 0xCC	; 204
    113a:	4c ec       	ldi	r20, 0xCC	; 204
    113c:	5e e3       	ldi	r21, 0x3E	; 62
    113e:	66 d3       	rcall	.+1740   	; 0x180c <__mulsf3>
    1140:	83 d2       	rcall	.+1286   	; 0x1648 <__fixunssfsi>
    1142:	79 bd       	out	0x29, r23	; 41
    1144:	68 bd       	out	0x28, r22	; 40
    1146:	2f ef       	ldi	r18, 0xFF	; 255
    1148:	83 ed       	ldi	r24, 0xD3	; 211
    114a:	90 e3       	ldi	r25, 0x30	; 48
    114c:	21 50       	subi	r18, 0x01	; 1
    114e:	80 40       	sbci	r24, 0x00	; 0
    1150:	90 40       	sbci	r25, 0x00	; 0
    1152:	e1 f7       	brne	.-8      	; 0x114c <__stack+0x4d>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <__stack+0x57>
    1156:	00 00       	nop
    1158:	08 95       	ret
		_delay_ms(1000);
		}else if (motorstatus == 5){ // 좌회전-고정
    115a:	85 30       	cpi	r24, 0x05	; 5
    115c:	91 05       	cpc	r25, r1
    115e:	a1 f4       	brne	.+40     	; 0x1188 <__stack+0x89>
		PORTB = (PORTB & 0xF0) | 0x04;
    1160:	88 b3       	in	r24, 0x18	; 24
    1162:	80 7f       	andi	r24, 0xF0	; 240
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	88 bb       	out	0x18, r24	; 24
		OCR1A = 0;
    1168:	1b bc       	out	0x2b, r1	; 43
    116a:	1a bc       	out	0x2a, r1	; 42
		OCR1B = ICR1 * 0.4;
    116c:	66 b5       	in	r22, 0x26	; 38
    116e:	77 b5       	in	r23, 0x27	; 39
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	95 d2       	rcall	.+1322   	; 0x16a0 <__floatunsisf>
    1176:	2d ec       	ldi	r18, 0xCD	; 205
    1178:	3c ec       	ldi	r19, 0xCC	; 204
    117a:	4c ec       	ldi	r20, 0xCC	; 204
    117c:	5e e3       	ldi	r21, 0x3E	; 62
    117e:	46 d3       	rcall	.+1676   	; 0x180c <__mulsf3>
    1180:	63 d2       	rcall	.+1222   	; 0x1648 <__fixunssfsi>
    1182:	79 bd       	out	0x29, r23	; 41
    1184:	68 bd       	out	0x28, r22	; 40
    1186:	08 95       	ret
		}else if (motorstatus == 6){ // 우회전-고정
    1188:	86 30       	cpi	r24, 0x06	; 6
    118a:	91 05       	cpc	r25, r1
    118c:	a1 f4       	brne	.+40     	; 0x11b6 <__stack+0xb7>
		PORTB = (PORTB & 0xF0) | 0x01;
    118e:	88 b3       	in	r24, 0x18	; 24
    1190:	80 7f       	andi	r24, 0xF0	; 240
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	88 bb       	out	0x18, r24	; 24
		OCR1A = ICR1 * 0.5;
    1196:	66 b5       	in	r22, 0x26	; 38
    1198:	77 b5       	in	r23, 0x27	; 39
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	80 d2       	rcall	.+1280   	; 0x16a0 <__floatunsisf>
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	5f e3       	ldi	r21, 0x3F	; 63
    11a8:	31 d3       	rcall	.+1634   	; 0x180c <__mulsf3>
    11aa:	4e d2       	rcall	.+1180   	; 0x1648 <__fixunssfsi>
    11ac:	7b bd       	out	0x2b, r23	; 43
    11ae:	6a bd       	out	0x2a, r22	; 42
    11b0:	19 bc       	out	0x29, r1	; 41
    11b2:	18 bc       	out	0x28, r1	; 40
		OCR1B = 0;
    11b4:	08 95       	ret
    11b6:	87 30       	cpi	r24, 0x07	; 7
    11b8:	91 05       	cpc	r25, r1
		}else if (motorstatus == 7){ //좌회전-전진(0x05로 할 시 오른쪽 모터 출력이 너무 강력해 듀티비 조절로 차이가 메꿔지지 않음)
    11ba:	e9 f4       	brne	.+58     	; 0x11f6 <__stack+0xf7>
		PORTB = (PORTB & 0xF0) | 0x04;
    11bc:	88 b3       	in	r24, 0x18	; 24
    11be:	80 7f       	andi	r24, 0xF0	; 240
    11c0:	84 60       	ori	r24, 0x04	; 4
    11c2:	88 bb       	out	0x18, r24	; 24
		OCR1A = 0;
    11c4:	1b bc       	out	0x2b, r1	; 43
    11c6:	1a bc       	out	0x2a, r1	; 42
		OCR1B = ICR1 * 0.4;
    11c8:	66 b5       	in	r22, 0x26	; 38
    11ca:	77 b5       	in	r23, 0x27	; 39
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	67 d2       	rcall	.+1230   	; 0x16a0 <__floatunsisf>
    11d2:	2d ec       	ldi	r18, 0xCD	; 205
    11d4:	3c ec       	ldi	r19, 0xCC	; 204
    11d6:	4c ec       	ldi	r20, 0xCC	; 204
    11d8:	5e e3       	ldi	r21, 0x3E	; 62
    11da:	18 d3       	rcall	.+1584   	; 0x180c <__mulsf3>
    11dc:	35 d2       	rcall	.+1130   	; 0x1648 <__fixunssfsi>
    11de:	79 bd       	out	0x29, r23	; 41
    11e0:	68 bd       	out	0x28, r22	; 40
    11e2:	2f ef       	ldi	r18, 0xFF	; 255
    11e4:	80 e7       	ldi	r24, 0x70	; 112
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	21 50       	subi	r18, 0x01	; 1
    11ea:	80 40       	sbci	r24, 0x00	; 0
    11ec:	90 40       	sbci	r25, 0x00	; 0
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <__stack+0xe9>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <__stack+0xf3>
    11f2:	00 00       	nop
    11f4:	08 95       	ret
		_delay_ms(50);
		/*PORTB = (PORTB & 0xF0) | 0x05;
		OCR1A = ICR1 * 0.3;
		OCR1B = ICR1 * 0.3;*/
		}else if (motorstatus == 8){ //우회전-전진
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	91 05       	cpc	r25, r1
    11fa:	e9 f4       	brne	.+58     	; 0x1236 <__stack+0x137>
		PORTB = (PORTB & 0xF0) | 0x01;
    11fc:	88 b3       	in	r24, 0x18	; 24
    11fe:	80 7f       	andi	r24, 0xF0	; 240
    1200:	81 60       	ori	r24, 0x01	; 1
		OCR1A = ICR1 * 0.4;
    1202:	88 bb       	out	0x18, r24	; 24
    1204:	66 b5       	in	r22, 0x26	; 38
    1206:	77 b5       	in	r23, 0x27	; 39
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	49 d2       	rcall	.+1170   	; 0x16a0 <__floatunsisf>
    120e:	2d ec       	ldi	r18, 0xCD	; 205
    1210:	3c ec       	ldi	r19, 0xCC	; 204
    1212:	4c ec       	ldi	r20, 0xCC	; 204
    1214:	5e e3       	ldi	r21, 0x3E	; 62
    1216:	fa d2       	rcall	.+1524   	; 0x180c <__mulsf3>
    1218:	17 d2       	rcall	.+1070   	; 0x1648 <__fixunssfsi>
    121a:	7b bd       	out	0x2b, r23	; 43
    121c:	6a bd       	out	0x2a, r22	; 42
		OCR1B = 0;
    121e:	19 bc       	out	0x29, r1	; 41
    1220:	18 bc       	out	0x28, r1	; 40
    1222:	2f ef       	ldi	r18, 0xFF	; 255
    1224:	80 e7       	ldi	r24, 0x70	; 112
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	21 50       	subi	r18, 0x01	; 1
    122a:	80 40       	sbci	r24, 0x00	; 0
    122c:	90 40       	sbci	r25, 0x00	; 0
    122e:	e1 f7       	brne	.-8      	; 0x1228 <__stack+0x129>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <__stack+0x133>
    1232:	00 00       	nop
		_delay_ms(50);
		/*PORTB = (PORTB & 0xF0) | 0x05;
		OCR1A = ICR1 * 0.3;
		OCR1B = ICR1 * 0.3;*/
		}else if (motorstatus == 9){ //정지
    1234:	08 95       	ret
    1236:	89 30       	cpi	r24, 0x09	; 9
		PORTB = (PORTB & 0xF0) | 0x00;
    1238:	91 05       	cpc	r25, r1
    123a:	29 f5       	brne	.+74     	; 0x1286 <__stack+0x187>
    123c:	88 b3       	in	r24, 0x18	; 24
		OCR1A = ICR1 * 0.0;
    123e:	80 7f       	andi	r24, 0xF0	; 240
    1240:	88 bb       	out	0x18, r24	; 24
    1242:	66 b5       	in	r22, 0x26	; 38
    1244:	77 b5       	in	r23, 0x27	; 39
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	2a d2       	rcall	.+1108   	; 0x16a0 <__floatunsisf>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	dc d2       	rcall	.+1464   	; 0x180c <__mulsf3>
    1254:	f9 d1       	rcall	.+1010   	; 0x1648 <__fixunssfsi>
		OCR1B = ICR1 * 0.0;
    1256:	7b bd       	out	0x2b, r23	; 43
    1258:	6a bd       	out	0x2a, r22	; 42
    125a:	66 b5       	in	r22, 0x26	; 38
    125c:	77 b5       	in	r23, 0x27	; 39
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	1e d2       	rcall	.+1084   	; 0x16a0 <__floatunsisf>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	d0 d2       	rcall	.+1440   	; 0x180c <__mulsf3>
    126c:	ed d1       	rcall	.+986    	; 0x1648 <__fixunssfsi>
    126e:	79 bd       	out	0x29, r23	; 41
    1270:	68 bd       	out	0x28, r22	; 40
    1272:	2f ef       	ldi	r18, 0xFF	; 255
    1274:	81 ee       	ldi	r24, 0xE1	; 225
    1276:	94 e0       	ldi	r25, 0x04	; 4
    1278:	21 50       	subi	r18, 0x01	; 1
    127a:	80 40       	sbci	r24, 0x00	; 0
    127c:	90 40       	sbci	r25, 0x00	; 0
    127e:	e1 f7       	brne	.-8      	; 0x1278 <__stack+0x179>
    1280:	00 c0       	rjmp	.+0      	; 0x1282 <__stack+0x183>
    1282:	00 00       	nop
    1284:	08 95       	ret
    1286:	89 2b       	or	r24, r25
		_delay_ms(100);
		} else if (motorstatus == 0){ // 강제직진
    1288:	39 f5       	brne	.+78     	; 0x12d8 <__stack+0x1d9>
    128a:	88 b3       	in	r24, 0x18	; 24
		PORTB = (PORTB & 0xF0) | 0x05;
    128c:	80 7f       	andi	r24, 0xF0	; 240
    128e:	85 60       	ori	r24, 0x05	; 5
    1290:	88 bb       	out	0x18, r24	; 24
    1292:	66 b5       	in	r22, 0x26	; 38
		OCR1A = ICR1 * 0.5;
    1294:	77 b5       	in	r23, 0x27	; 39
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 d2       	rcall	.+1028   	; 0x16a0 <__floatunsisf>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	5f e3       	ldi	r21, 0x3F	; 63
    12a4:	b3 d2       	rcall	.+1382   	; 0x180c <__mulsf3>
    12a6:	d0 d1       	rcall	.+928    	; 0x1648 <__fixunssfsi>
    12a8:	7b bd       	out	0x2b, r23	; 43
    12aa:	6a bd       	out	0x2a, r22	; 42
    12ac:	66 b5       	in	r22, 0x26	; 38
    12ae:	77 b5       	in	r23, 0x27	; 39
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
		OCR1B = ICR1 * 0.5;
    12b4:	f5 d1       	rcall	.+1002   	; 0x16a0 <__floatunsisf>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	a6 d2       	rcall	.+1356   	; 0x180c <__mulsf3>
    12c0:	c3 d1       	rcall	.+902    	; 0x1648 <__fixunssfsi>
    12c2:	79 bd       	out	0x29, r23	; 41
    12c4:	68 bd       	out	0x28, r22	; 40
    12c6:	2f ef       	ldi	r18, 0xFF	; 255
    12c8:	80 e4       	ldi	r24, 0x40	; 64
    12ca:	9a e0       	ldi	r25, 0x0A	; 10
    12cc:	21 50       	subi	r18, 0x01	; 1
    12ce:	80 40       	sbci	r24, 0x00	; 0
    12d0:	90 40       	sbci	r25, 0x00	; 0
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <__stack+0x1cd>
    12d4:	00 c0       	rjmp	.+0      	; 0x12d6 <__stack+0x1d7>
    12d6:	00 00       	nop
    12d8:	08 95       	ret

000012da <main>:
    12da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    12de:	8f e6       	ldi	r24, 0x6F	; 111
    12e0:	87 bb       	out	0x17, r24	; 23
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	8a bb       	out	0x1a, r24	; 26
    12e6:	9f e0       	ldi	r25, 0x0F	; 15
	// F 입력, B 모터, A LED
	DDRF = 0x00;
	DDRB = 0x6F;
	DDRA = 0xFF;

	EIMSK = 0b00001111; 
    12e8:	99 bf       	out	0x39, r25	; 57
	EICRA = 0b11111111; // 상승엣지에 트리거
    12ea:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>

	TCNT0 = 231; // 타이머 초기화
    12ee:	87 ee       	ldi	r24, 0xE7	; 231
    12f0:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x03; // 분주비 32
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x01; // 오버플로우 인터럽트 활성화
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	87 bf       	out	0x37, r24	; 55

	ADMUX = 0x40;
    12fa:	80 e4       	ldi	r24, 0x40	; 64
    12fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87;
    12fe:	87 e8       	ldi	r24, 0x87	; 135
    1300:	86 b9       	out	0x06, r24	; 6

	TCCR1A = 0xA2;
    1302:	82 ea       	ldi	r24, 0xA2	; 162
    1304:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x1A;//prescaler 8
    1306:	8a e1       	ldi	r24, 0x1A	; 26
    1308:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
    130a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	ICR1 = 399;
    130e:	8f e8       	ldi	r24, 0x8F	; 143
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	97 bd       	out	0x27, r25	; 39
    1314:	86 bd       	out	0x26, r24	; 38
	TCNT1 = 0x00;
    1316:	1d bc       	out	0x2d, r1	; 45
    1318:	1c bc       	out	0x2c, r1	; 44

	SREG = 0x80;
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	8f bf       	out	0x3f, r24	; 63
	sei();
    131e:	78 94       	sei

	lcdInit();
    1320:	0e 94 33 01 	call	0x266	; 0x266 <lcdInit>
	lcdClear();
    1324:	0e 94 ad 00 	call	0x15a	; 0x15a <lcdClear>
	lcdString(0, 0, "time:");
    1328:	4d e1       	ldi	r20, 0x1D	; 29
    132a:	51 e0       	ldi	r21, 0x01	; 1
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	lcdString(1, 0, "motor:");
    1334:	43 e2       	ldi	r20, 0x23	; 35
    1336:	51 e0       	ldi	r21, 0x01	; 1
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	lcdString(1, 9 ,"MODE: ");
    1340:	4a e2       	ldi	r20, 0x2A	; 42
    1342:	51 e0       	ldi	r21, 0x01	; 1
    1344:	69 e0       	ldi	r22, 0x09	; 9
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	
	while (1) {
		readIRAndFilter();
    134c:	9f dc       	rcall	.-1730   	; 0xc8c <readIRAndFilter>
		lineTrace(bit);	
    134e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1352:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
		updateLCD();
    1356:	70 dc       	rcall	.-1824   	; 0xc38 <lineTrace>
    1358:	ca dd       	rcall	.-1132   	; 0xeee <updateLCD>
		controlMotors();
    135a:	f2 dd       	rcall	.-1052   	; 0xf40 <controlMotors>
    135c:	f7 cf       	rjmp	.-18     	; 0x134c <main+0x72>

0000135e <__vector_16>:
    135e:	1f 92       	push	r1
	}
}



ISR(TIMER0_OVF_vect) {
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
	count50ms++;
    136e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <count50ms>
    1372:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <count50ms+0x1>
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <count50ms+0x1>
    137c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <count50ms>
	if(count50ms)
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	81 f0       	breq	.+32     	; 0x13a4 <__vector_16+0x46>
	if (count50ms >= 2000) {
    1384:	80 3d       	cpi	r24, 0xD0	; 208
    1386:	97 40       	sbci	r25, 0x07	; 7
    1388:	68 f0       	brcs	.+26     	; 0x13a4 <__vector_16+0x46>
		count50ms = 0;
    138a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <count50ms+0x1>
    138e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <count50ms>
		sec++;
    1392:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sec>
    1396:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sec+0x1>
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <sec+0x1>
    13a0:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <sec>
	}
}
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <__vector_1>:

ISR(INT0_vect){//모드3 바로 진입
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	0b b6       	in	r0, 0x3b	; 59
    13c0:	0f 92       	push	r0
    13c2:	2f 93       	push	r18
    13c4:	3f 93       	push	r19
    13c6:	4f 93       	push	r20
    13c8:	5f 93       	push	r21
    13ca:	6f 93       	push	r22
    13cc:	7f 93       	push	r23
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	af 93       	push	r26
    13d4:	bf 93       	push	r27
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
	MODE = 3;
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <MODE+0x1>
    13e2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <MODE>
	lcdClear();
    13e6:	0e 94 ad 00 	call	0x15a	; 0x15a <lcdClear>
	lcdString(0, 0, "time:");
    13ea:	4d e1       	ldi	r20, 0x1D	; 29
    13ec:	51 e0       	ldi	r21, 0x01	; 1
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	lcdString(1, 0, "motor:");
    13f6:	43 e2       	ldi	r20, 0x23	; 35
    13f8:	51 e0       	ldi	r21, 0x01	; 1
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	lcdString(1, 9 ,"MODE: ");
    1402:	4a e2       	ldi	r20, 0x2A	; 42
    1404:	51 e0       	ldi	r21, 0x01	; 1
    1406:	69 e0       	ldi	r22, 0x09	; 9
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	sec = 0;
    140e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sec+0x1>
    1412:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <sec>
	DFC = 0;
    1416:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <DFC+0x1>
    141a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <DFC>
	cnt = 0;
    141e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <cnt+0x1>
    1422:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <cnt>
	enablePSD = 0;
    1426:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <enablePSD+0x1>
    142a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <enablePSD>
	for(int i = 0; i < 6; i++){//정규화 배열 초기화
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	11 c0       	rjmp	.+34     	; 0x1456 <__vector_1+0xa2>
		IRmin[i] = 1024;
    1434:	c9 01       	movw	r24, r18
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	fc 01       	movw	r30, r24
    143c:	ee 5f       	subi	r30, 0xFE	; 254
    143e:	fe 4f       	sbci	r31, 0xFE	; 254
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	54 e0       	ldi	r21, 0x04	; 4
    1444:	51 83       	std	Z+1, r21	; 0x01
    1446:	40 83       	st	Z, r20
		IRmax[i] = 0;
    1448:	fc 01       	movw	r30, r24
    144a:	e8 5c       	subi	r30, 0xC8	; 200
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	11 82       	std	Z+1, r1	; 0x01
    1450:	10 82       	st	Z, r1
	lcdString(1, 9 ,"MODE: ");
	sec = 0;
	DFC = 0;
	cnt = 0;
	enablePSD = 0;
	for(int i = 0; i < 6; i++){//정규화 배열 초기화
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	26 30       	cpi	r18, 0x06	; 6
    1458:	31 05       	cpc	r19, r1
    145a:	64 f3       	brlt	.-40     	; 0x1434 <__vector_1+0x80>
		IRmin[i] = 1024;
		IRmax[i] = 0;
	}
}
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0b be       	out	0x3b, r0	; 59
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	0f 90       	pop	r0
    147e:	1f 90       	pop	r1
    1480:	18 95       	reti

00001482 <__vector_2>:

ISR(INT1_vect){
    1482:	1f 92       	push	r1
    1484:	0f 92       	push	r0
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	0f 92       	push	r0
    148a:	11 24       	eor	r1, r1
	sec = 0;
    148c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sec+0x1>
    1490:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <sec>
	
}
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_3>:

ISR(INT2_vect){//모드4 바로 진입
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	0b b6       	in	r0, 0x3b	; 59
    14aa:	0f 92       	push	r0
    14ac:	2f 93       	push	r18
    14ae:	3f 93       	push	r19
    14b0:	4f 93       	push	r20
    14b2:	5f 93       	push	r21
    14b4:	6f 93       	push	r22
    14b6:	7f 93       	push	r23
    14b8:	8f 93       	push	r24
    14ba:	9f 93       	push	r25
    14bc:	af 93       	push	r26
    14be:	bf 93       	push	r27
    14c0:	ef 93       	push	r30
    14c2:	ff 93       	push	r31
	MODE = 4;
    14c4:	84 e0       	ldi	r24, 0x04	; 4
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <MODE+0x1>
    14cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <MODE>
	lcdClear();
    14d0:	0e 94 ad 00 	call	0x15a	; 0x15a <lcdClear>
	lcdString(0, 0, "time:");
    14d4:	4d e1       	ldi	r20, 0x1D	; 29
    14d6:	51 e0       	ldi	r21, 0x01	; 1
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	lcdString(1, 0, "motor:");
    14e0:	43 e2       	ldi	r20, 0x23	; 35
    14e2:	51 e0       	ldi	r21, 0x01	; 1
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	lcdString(1, 9 ,"MODE: ");
    14ec:	4a e2       	ldi	r20, 0x2A	; 42
    14ee:	51 e0       	ldi	r21, 0x01	; 1
    14f0:	69 e0       	ldi	r22, 0x09	; 9
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdString>
	sec = 0;
    14f8:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <sec+0x1>
    14fc:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <sec>
	DFC = 0;
    1500:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <DFC+0x1>
    1504:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <DFC>
	cnt = 0;
    1508:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <cnt+0x1>
    150c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <cnt>
	enablePSD = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <enablePSD+0x1>
    1518:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <enablePSD>
	for(int i = 0; i < 6; i++){//정규화 배열 초기화
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	11 c0       	rjmp	.+34     	; 0x1544 <__vector_3+0xa6>
		IRmin[i] = 1024;
    1522:	c9 01       	movw	r24, r18
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	fc 01       	movw	r30, r24
    152a:	ee 5f       	subi	r30, 0xFE	; 254
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	54 e0       	ldi	r21, 0x04	; 4
    1532:	51 83       	std	Z+1, r21	; 0x01
    1534:	40 83       	st	Z, r20
		IRmax[i] = 0;
    1536:	fc 01       	movw	r30, r24
    1538:	e8 5c       	subi	r30, 0xC8	; 200
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	11 82       	std	Z+1, r1	; 0x01
    153e:	10 82       	st	Z, r1
	lcdString(1, 9 ,"MODE: ");
	sec = 0;
	DFC = 0;
	cnt = 0;
	enablePSD = 1;
	for(int i = 0; i < 6; i++){//정규화 배열 초기화
    1540:	2f 5f       	subi	r18, 0xFF	; 255
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	26 30       	cpi	r18, 0x06	; 6
    1546:	31 05       	cpc	r19, r1
    1548:	64 f3       	brlt	.-40     	; 0x1522 <__vector_3+0x84>
		IRmin[i] = 1024;
		IRmax[i] = 0;
	}
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0b be       	out	0x3b, r0	; 59
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <__cmpsf2>:
    1570:	d4 d0       	rcall	.+424    	; 0x171a <__fp_cmp>
    1572:	08 f4       	brcc	.+2      	; 0x1576 <__cmpsf2+0x6>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	08 95       	ret

00001578 <__divsf3>:
    1578:	0c d0       	rcall	.+24     	; 0x1592 <__divsf3x>
    157a:	0a c1       	rjmp	.+532    	; 0x1790 <__fp_round>
    157c:	02 d1       	rcall	.+516    	; 0x1782 <__fp_pscB>
    157e:	40 f0       	brcs	.+16     	; 0x1590 <__divsf3+0x18>
    1580:	f9 d0       	rcall	.+498    	; 0x1774 <__fp_pscA>
    1582:	30 f0       	brcs	.+12     	; 0x1590 <__divsf3+0x18>
    1584:	21 f4       	brne	.+8      	; 0x158e <__divsf3+0x16>
    1586:	5f 3f       	cpi	r21, 0xFF	; 255
    1588:	19 f0       	breq	.+6      	; 0x1590 <__divsf3+0x18>
    158a:	eb c0       	rjmp	.+470    	; 0x1762 <__fp_inf>
    158c:	51 11       	cpse	r21, r1
    158e:	34 c1       	rjmp	.+616    	; 0x17f8 <__fp_szero>
    1590:	ee c0       	rjmp	.+476    	; 0x176e <__fp_nan>

00001592 <__divsf3x>:
    1592:	0f d1       	rcall	.+542    	; 0x17b2 <__fp_split3>
    1594:	98 f3       	brcs	.-26     	; 0x157c <__divsf3+0x4>

00001596 <__divsf3_pse>:
    1596:	99 23       	and	r25, r25
    1598:	c9 f3       	breq	.-14     	; 0x158c <__divsf3+0x14>
    159a:	55 23       	and	r21, r21
    159c:	b1 f3       	breq	.-20     	; 0x158a <__divsf3+0x12>
    159e:	95 1b       	sub	r25, r21
    15a0:	55 0b       	sbc	r21, r21
    15a2:	bb 27       	eor	r27, r27
    15a4:	aa 27       	eor	r26, r26
    15a6:	62 17       	cp	r22, r18
    15a8:	73 07       	cpc	r23, r19
    15aa:	84 07       	cpc	r24, r20
    15ac:	38 f0       	brcs	.+14     	; 0x15bc <__divsf3_pse+0x26>
    15ae:	9f 5f       	subi	r25, 0xFF	; 255
    15b0:	5f 4f       	sbci	r21, 0xFF	; 255
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	44 1f       	adc	r20, r20
    15b8:	aa 1f       	adc	r26, r26
    15ba:	a9 f3       	breq	.-22     	; 0x15a6 <__divsf3_pse+0x10>
    15bc:	33 d0       	rcall	.+102    	; 0x1624 <__divsf3_pse+0x8e>
    15be:	0e 2e       	mov	r0, r30
    15c0:	3a f0       	brmi	.+14     	; 0x15d0 <__divsf3_pse+0x3a>
    15c2:	e0 e8       	ldi	r30, 0x80	; 128
    15c4:	30 d0       	rcall	.+96     	; 0x1626 <__divsf3_pse+0x90>
    15c6:	91 50       	subi	r25, 0x01	; 1
    15c8:	50 40       	sbci	r21, 0x00	; 0
    15ca:	e6 95       	lsr	r30
    15cc:	00 1c       	adc	r0, r0
    15ce:	ca f7       	brpl	.-14     	; 0x15c2 <__divsf3_pse+0x2c>
    15d0:	29 d0       	rcall	.+82     	; 0x1624 <__divsf3_pse+0x8e>
    15d2:	fe 2f       	mov	r31, r30
    15d4:	27 d0       	rcall	.+78     	; 0x1624 <__divsf3_pse+0x8e>
    15d6:	66 0f       	add	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	bb 1f       	adc	r27, r27
    15de:	26 17       	cp	r18, r22
    15e0:	37 07       	cpc	r19, r23
    15e2:	48 07       	cpc	r20, r24
    15e4:	ab 07       	cpc	r26, r27
    15e6:	b0 e8       	ldi	r27, 0x80	; 128
    15e8:	09 f0       	breq	.+2      	; 0x15ec <__divsf3_pse+0x56>
    15ea:	bb 0b       	sbc	r27, r27
    15ec:	80 2d       	mov	r24, r0
    15ee:	bf 01       	movw	r22, r30
    15f0:	ff 27       	eor	r31, r31
    15f2:	93 58       	subi	r25, 0x83	; 131
    15f4:	5f 4f       	sbci	r21, 0xFF	; 255
    15f6:	2a f0       	brmi	.+10     	; 0x1602 <__divsf3_pse+0x6c>
    15f8:	9e 3f       	cpi	r25, 0xFE	; 254
    15fa:	51 05       	cpc	r21, r1
    15fc:	68 f0       	brcs	.+26     	; 0x1618 <__divsf3_pse+0x82>
    15fe:	b1 c0       	rjmp	.+354    	; 0x1762 <__fp_inf>
    1600:	fb c0       	rjmp	.+502    	; 0x17f8 <__fp_szero>
    1602:	5f 3f       	cpi	r21, 0xFF	; 255
    1604:	ec f3       	brlt	.-6      	; 0x1600 <__divsf3_pse+0x6a>
    1606:	98 3e       	cpi	r25, 0xE8	; 232
    1608:	dc f3       	brlt	.-10     	; 0x1600 <__divsf3_pse+0x6a>
    160a:	86 95       	lsr	r24
    160c:	77 95       	ror	r23
    160e:	67 95       	ror	r22
    1610:	b7 95       	ror	r27
    1612:	f7 95       	ror	r31
    1614:	9f 5f       	subi	r25, 0xFF	; 255
    1616:	c9 f7       	brne	.-14     	; 0x160a <__divsf3_pse+0x74>
    1618:	88 0f       	add	r24, r24
    161a:	91 1d       	adc	r25, r1
    161c:	96 95       	lsr	r25
    161e:	87 95       	ror	r24
    1620:	97 f9       	bld	r25, 7
    1622:	08 95       	ret
    1624:	e1 e0       	ldi	r30, 0x01	; 1
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	bb 1f       	adc	r27, r27
    162e:	62 17       	cp	r22, r18
    1630:	73 07       	cpc	r23, r19
    1632:	84 07       	cpc	r24, r20
    1634:	ba 07       	cpc	r27, r26
    1636:	20 f0       	brcs	.+8      	; 0x1640 <__divsf3_pse+0xaa>
    1638:	62 1b       	sub	r22, r18
    163a:	73 0b       	sbc	r23, r19
    163c:	84 0b       	sbc	r24, r20
    163e:	ba 0b       	sbc	r27, r26
    1640:	ee 1f       	adc	r30, r30
    1642:	88 f7       	brcc	.-30     	; 0x1626 <__divsf3_pse+0x90>
    1644:	e0 95       	com	r30
    1646:	08 95       	ret

00001648 <__fixunssfsi>:
    1648:	bc d0       	rcall	.+376    	; 0x17c2 <__fp_splitA>
    164a:	88 f0       	brcs	.+34     	; 0x166e <__fixunssfsi+0x26>
    164c:	9f 57       	subi	r25, 0x7F	; 127
    164e:	90 f0       	brcs	.+36     	; 0x1674 <__fixunssfsi+0x2c>
    1650:	b9 2f       	mov	r27, r25
    1652:	99 27       	eor	r25, r25
    1654:	b7 51       	subi	r27, 0x17	; 23
    1656:	a0 f0       	brcs	.+40     	; 0x1680 <__fixunssfsi+0x38>
    1658:	d1 f0       	breq	.+52     	; 0x168e <__fixunssfsi+0x46>
    165a:	66 0f       	add	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	88 1f       	adc	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	1a f0       	brmi	.+6      	; 0x166a <__fixunssfsi+0x22>
    1664:	ba 95       	dec	r27
    1666:	c9 f7       	brne	.-14     	; 0x165a <__fixunssfsi+0x12>
    1668:	12 c0       	rjmp	.+36     	; 0x168e <__fixunssfsi+0x46>
    166a:	b1 30       	cpi	r27, 0x01	; 1
    166c:	81 f0       	breq	.+32     	; 0x168e <__fixunssfsi+0x46>
    166e:	c3 d0       	rcall	.+390    	; 0x17f6 <__fp_zero>
    1670:	b1 e0       	ldi	r27, 0x01	; 1
    1672:	08 95       	ret
    1674:	c0 c0       	rjmp	.+384    	; 0x17f6 <__fp_zero>
    1676:	67 2f       	mov	r22, r23
    1678:	78 2f       	mov	r23, r24
    167a:	88 27       	eor	r24, r24
    167c:	b8 5f       	subi	r27, 0xF8	; 248
    167e:	39 f0       	breq	.+14     	; 0x168e <__fixunssfsi+0x46>
    1680:	b9 3f       	cpi	r27, 0xF9	; 249
    1682:	cc f3       	brlt	.-14     	; 0x1676 <__fixunssfsi+0x2e>
    1684:	86 95       	lsr	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b3 95       	inc	r27
    168c:	d9 f7       	brne	.-10     	; 0x1684 <__fixunssfsi+0x3c>
    168e:	3e f4       	brtc	.+14     	; 0x169e <__fixunssfsi+0x56>
    1690:	90 95       	com	r25
    1692:	80 95       	com	r24
    1694:	70 95       	com	r23
    1696:	61 95       	neg	r22
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	8f 4f       	sbci	r24, 0xFF	; 255
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	08 95       	ret

000016a0 <__floatunsisf>:
    16a0:	e8 94       	clt
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <__floatsisf+0x12>

000016a4 <__floatsisf>:
    16a4:	97 fb       	bst	r25, 7
    16a6:	3e f4       	brtc	.+14     	; 0x16b6 <__floatsisf+0x12>
    16a8:	90 95       	com	r25
    16aa:	80 95       	com	r24
    16ac:	70 95       	com	r23
    16ae:	61 95       	neg	r22
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	8f 4f       	sbci	r24, 0xFF	; 255
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	99 23       	and	r25, r25
    16b8:	a9 f0       	breq	.+42     	; 0x16e4 <__floatsisf+0x40>
    16ba:	f9 2f       	mov	r31, r25
    16bc:	96 e9       	ldi	r25, 0x96	; 150
    16be:	bb 27       	eor	r27, r27
    16c0:	93 95       	inc	r25
    16c2:	f6 95       	lsr	r31
    16c4:	87 95       	ror	r24
    16c6:	77 95       	ror	r23
    16c8:	67 95       	ror	r22
    16ca:	b7 95       	ror	r27
    16cc:	f1 11       	cpse	r31, r1
    16ce:	f8 cf       	rjmp	.-16     	; 0x16c0 <__floatsisf+0x1c>
    16d0:	fa f4       	brpl	.+62     	; 0x1710 <__floatsisf+0x6c>
    16d2:	bb 0f       	add	r27, r27
    16d4:	11 f4       	brne	.+4      	; 0x16da <__floatsisf+0x36>
    16d6:	60 ff       	sbrs	r22, 0
    16d8:	1b c0       	rjmp	.+54     	; 0x1710 <__floatsisf+0x6c>
    16da:	6f 5f       	subi	r22, 0xFF	; 255
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	16 c0       	rjmp	.+44     	; 0x1710 <__floatsisf+0x6c>
    16e4:	88 23       	and	r24, r24
    16e6:	11 f0       	breq	.+4      	; 0x16ec <__floatsisf+0x48>
    16e8:	96 e9       	ldi	r25, 0x96	; 150
    16ea:	11 c0       	rjmp	.+34     	; 0x170e <__floatsisf+0x6a>
    16ec:	77 23       	and	r23, r23
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <__floatsisf+0x54>
    16f0:	9e e8       	ldi	r25, 0x8E	; 142
    16f2:	87 2f       	mov	r24, r23
    16f4:	76 2f       	mov	r23, r22
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <__floatsisf+0x5e>
    16f8:	66 23       	and	r22, r22
    16fa:	71 f0       	breq	.+28     	; 0x1718 <__floatsisf+0x74>
    16fc:	96 e8       	ldi	r25, 0x86	; 134
    16fe:	86 2f       	mov	r24, r22
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	2a f0       	brmi	.+10     	; 0x1710 <__floatsisf+0x6c>
    1706:	9a 95       	dec	r25
    1708:	66 0f       	add	r22, r22
    170a:	77 1f       	adc	r23, r23
    170c:	88 1f       	adc	r24, r24
    170e:	da f7       	brpl	.-10     	; 0x1706 <__floatsisf+0x62>
    1710:	88 0f       	add	r24, r24
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	97 f9       	bld	r25, 7
    1718:	08 95       	ret

0000171a <__fp_cmp>:
    171a:	99 0f       	add	r25, r25
    171c:	00 08       	sbc	r0, r0
    171e:	55 0f       	add	r21, r21
    1720:	aa 0b       	sbc	r26, r26
    1722:	e0 e8       	ldi	r30, 0x80	; 128
    1724:	fe ef       	ldi	r31, 0xFE	; 254
    1726:	16 16       	cp	r1, r22
    1728:	17 06       	cpc	r1, r23
    172a:	e8 07       	cpc	r30, r24
    172c:	f9 07       	cpc	r31, r25
    172e:	c0 f0       	brcs	.+48     	; 0x1760 <__fp_cmp+0x46>
    1730:	12 16       	cp	r1, r18
    1732:	13 06       	cpc	r1, r19
    1734:	e4 07       	cpc	r30, r20
    1736:	f5 07       	cpc	r31, r21
    1738:	98 f0       	brcs	.+38     	; 0x1760 <__fp_cmp+0x46>
    173a:	62 1b       	sub	r22, r18
    173c:	73 0b       	sbc	r23, r19
    173e:	84 0b       	sbc	r24, r20
    1740:	95 0b       	sbc	r25, r21
    1742:	39 f4       	brne	.+14     	; 0x1752 <__fp_cmp+0x38>
    1744:	0a 26       	eor	r0, r26
    1746:	61 f0       	breq	.+24     	; 0x1760 <__fp_cmp+0x46>
    1748:	23 2b       	or	r18, r19
    174a:	24 2b       	or	r18, r20
    174c:	25 2b       	or	r18, r21
    174e:	21 f4       	brne	.+8      	; 0x1758 <__fp_cmp+0x3e>
    1750:	08 95       	ret
    1752:	0a 26       	eor	r0, r26
    1754:	09 f4       	brne	.+2      	; 0x1758 <__fp_cmp+0x3e>
    1756:	a1 40       	sbci	r26, 0x01	; 1
    1758:	a6 95       	lsr	r26
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	81 1d       	adc	r24, r1
    175e:	81 1d       	adc	r24, r1
    1760:	08 95       	ret

00001762 <__fp_inf>:
    1762:	97 f9       	bld	r25, 7
    1764:	9f 67       	ori	r25, 0x7F	; 127
    1766:	80 e8       	ldi	r24, 0x80	; 128
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	08 95       	ret

0000176e <__fp_nan>:
    176e:	9f ef       	ldi	r25, 0xFF	; 255
    1770:	80 ec       	ldi	r24, 0xC0	; 192
    1772:	08 95       	ret

00001774 <__fp_pscA>:
    1774:	00 24       	eor	r0, r0
    1776:	0a 94       	dec	r0
    1778:	16 16       	cp	r1, r22
    177a:	17 06       	cpc	r1, r23
    177c:	18 06       	cpc	r1, r24
    177e:	09 06       	cpc	r0, r25
    1780:	08 95       	ret

00001782 <__fp_pscB>:
    1782:	00 24       	eor	r0, r0
    1784:	0a 94       	dec	r0
    1786:	12 16       	cp	r1, r18
    1788:	13 06       	cpc	r1, r19
    178a:	14 06       	cpc	r1, r20
    178c:	05 06       	cpc	r0, r21
    178e:	08 95       	ret

00001790 <__fp_round>:
    1790:	09 2e       	mov	r0, r25
    1792:	03 94       	inc	r0
    1794:	00 0c       	add	r0, r0
    1796:	11 f4       	brne	.+4      	; 0x179c <__fp_round+0xc>
    1798:	88 23       	and	r24, r24
    179a:	52 f0       	brmi	.+20     	; 0x17b0 <__fp_round+0x20>
    179c:	bb 0f       	add	r27, r27
    179e:	40 f4       	brcc	.+16     	; 0x17b0 <__fp_round+0x20>
    17a0:	bf 2b       	or	r27, r31
    17a2:	11 f4       	brne	.+4      	; 0x17a8 <__fp_round+0x18>
    17a4:	60 ff       	sbrs	r22, 0
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <__fp_round+0x20>
    17a8:	6f 5f       	subi	r22, 0xFF	; 255
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	08 95       	ret

000017b2 <__fp_split3>:
    17b2:	57 fd       	sbrc	r21, 7
    17b4:	90 58       	subi	r25, 0x80	; 128
    17b6:	44 0f       	add	r20, r20
    17b8:	55 1f       	adc	r21, r21
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <__fp_splitA+0x10>
    17bc:	5f 3f       	cpi	r21, 0xFF	; 255
    17be:	71 f0       	breq	.+28     	; 0x17dc <__fp_splitA+0x1a>
    17c0:	47 95       	ror	r20

000017c2 <__fp_splitA>:
    17c2:	88 0f       	add	r24, r24
    17c4:	97 fb       	bst	r25, 7
    17c6:	99 1f       	adc	r25, r25
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <__fp_splitA+0x20>
    17ca:	9f 3f       	cpi	r25, 0xFF	; 255
    17cc:	79 f0       	breq	.+30     	; 0x17ec <__fp_splitA+0x2a>
    17ce:	87 95       	ror	r24
    17d0:	08 95       	ret
    17d2:	12 16       	cp	r1, r18
    17d4:	13 06       	cpc	r1, r19
    17d6:	14 06       	cpc	r1, r20
    17d8:	55 1f       	adc	r21, r21
    17da:	f2 cf       	rjmp	.-28     	; 0x17c0 <__fp_split3+0xe>
    17dc:	46 95       	lsr	r20
    17de:	f1 df       	rcall	.-30     	; 0x17c2 <__fp_splitA>
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <__fp_splitA+0x30>
    17e2:	16 16       	cp	r1, r22
    17e4:	17 06       	cpc	r1, r23
    17e6:	18 06       	cpc	r1, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	f1 cf       	rjmp	.-30     	; 0x17ce <__fp_splitA+0xc>
    17ec:	86 95       	lsr	r24
    17ee:	71 05       	cpc	r23, r1
    17f0:	61 05       	cpc	r22, r1
    17f2:	08 94       	sec
    17f4:	08 95       	ret

000017f6 <__fp_zero>:
    17f6:	e8 94       	clt

000017f8 <__fp_szero>:
    17f8:	bb 27       	eor	r27, r27
    17fa:	66 27       	eor	r22, r22
    17fc:	77 27       	eor	r23, r23
    17fe:	cb 01       	movw	r24, r22
    1800:	97 f9       	bld	r25, 7
    1802:	08 95       	ret

00001804 <__gesf2>:
    1804:	8a df       	rcall	.-236    	; 0x171a <__fp_cmp>
    1806:	08 f4       	brcc	.+2      	; 0x180a <__gesf2+0x6>
    1808:	8f ef       	ldi	r24, 0xFF	; 255
    180a:	08 95       	ret

0000180c <__mulsf3>:
    180c:	0b d0       	rcall	.+22     	; 0x1824 <__mulsf3x>
    180e:	c0 cf       	rjmp	.-128    	; 0x1790 <__fp_round>
    1810:	b1 df       	rcall	.-158    	; 0x1774 <__fp_pscA>
    1812:	28 f0       	brcs	.+10     	; 0x181e <__mulsf3+0x12>
    1814:	b6 df       	rcall	.-148    	; 0x1782 <__fp_pscB>
    1816:	18 f0       	brcs	.+6      	; 0x181e <__mulsf3+0x12>
    1818:	95 23       	and	r25, r21
    181a:	09 f0       	breq	.+2      	; 0x181e <__mulsf3+0x12>
    181c:	a2 cf       	rjmp	.-188    	; 0x1762 <__fp_inf>
    181e:	a7 cf       	rjmp	.-178    	; 0x176e <__fp_nan>
    1820:	11 24       	eor	r1, r1
    1822:	ea cf       	rjmp	.-44     	; 0x17f8 <__fp_szero>

00001824 <__mulsf3x>:
    1824:	c6 df       	rcall	.-116    	; 0x17b2 <__fp_split3>
    1826:	a0 f3       	brcs	.-24     	; 0x1810 <__mulsf3+0x4>

00001828 <__mulsf3_pse>:
    1828:	95 9f       	mul	r25, r21
    182a:	d1 f3       	breq	.-12     	; 0x1820 <__mulsf3+0x14>
    182c:	95 0f       	add	r25, r21
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	55 1f       	adc	r21, r21
    1832:	62 9f       	mul	r22, r18
    1834:	f0 01       	movw	r30, r0
    1836:	72 9f       	mul	r23, r18
    1838:	bb 27       	eor	r27, r27
    183a:	f0 0d       	add	r31, r0
    183c:	b1 1d       	adc	r27, r1
    183e:	63 9f       	mul	r22, r19
    1840:	aa 27       	eor	r26, r26
    1842:	f0 0d       	add	r31, r0
    1844:	b1 1d       	adc	r27, r1
    1846:	aa 1f       	adc	r26, r26
    1848:	64 9f       	mul	r22, r20
    184a:	66 27       	eor	r22, r22
    184c:	b0 0d       	add	r27, r0
    184e:	a1 1d       	adc	r26, r1
    1850:	66 1f       	adc	r22, r22
    1852:	82 9f       	mul	r24, r18
    1854:	22 27       	eor	r18, r18
    1856:	b0 0d       	add	r27, r0
    1858:	a1 1d       	adc	r26, r1
    185a:	62 1f       	adc	r22, r18
    185c:	73 9f       	mul	r23, r19
    185e:	b0 0d       	add	r27, r0
    1860:	a1 1d       	adc	r26, r1
    1862:	62 1f       	adc	r22, r18
    1864:	83 9f       	mul	r24, r19
    1866:	a0 0d       	add	r26, r0
    1868:	61 1d       	adc	r22, r1
    186a:	22 1f       	adc	r18, r18
    186c:	74 9f       	mul	r23, r20
    186e:	33 27       	eor	r19, r19
    1870:	a0 0d       	add	r26, r0
    1872:	61 1d       	adc	r22, r1
    1874:	23 1f       	adc	r18, r19
    1876:	84 9f       	mul	r24, r20
    1878:	60 0d       	add	r22, r0
    187a:	21 1d       	adc	r18, r1
    187c:	82 2f       	mov	r24, r18
    187e:	76 2f       	mov	r23, r22
    1880:	6a 2f       	mov	r22, r26
    1882:	11 24       	eor	r1, r1
    1884:	9f 57       	subi	r25, 0x7F	; 127
    1886:	50 40       	sbci	r21, 0x00	; 0
    1888:	8a f0       	brmi	.+34     	; 0x18ac <__mulsf3_pse+0x84>
    188a:	e1 f0       	breq	.+56     	; 0x18c4 <__mulsf3_pse+0x9c>
    188c:	88 23       	and	r24, r24
    188e:	4a f0       	brmi	.+18     	; 0x18a2 <__mulsf3_pse+0x7a>
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	bb 1f       	adc	r27, r27
    1896:	66 1f       	adc	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	91 50       	subi	r25, 0x01	; 1
    189e:	50 40       	sbci	r21, 0x00	; 0
    18a0:	a9 f7       	brne	.-22     	; 0x188c <__mulsf3_pse+0x64>
    18a2:	9e 3f       	cpi	r25, 0xFE	; 254
    18a4:	51 05       	cpc	r21, r1
    18a6:	70 f0       	brcs	.+28     	; 0x18c4 <__mulsf3_pse+0x9c>
    18a8:	5c cf       	rjmp	.-328    	; 0x1762 <__fp_inf>
    18aa:	a6 cf       	rjmp	.-180    	; 0x17f8 <__fp_szero>
    18ac:	5f 3f       	cpi	r21, 0xFF	; 255
    18ae:	ec f3       	brlt	.-6      	; 0x18aa <__mulsf3_pse+0x82>
    18b0:	98 3e       	cpi	r25, 0xE8	; 232
    18b2:	dc f3       	brlt	.-10     	; 0x18aa <__mulsf3_pse+0x82>
    18b4:	86 95       	lsr	r24
    18b6:	77 95       	ror	r23
    18b8:	67 95       	ror	r22
    18ba:	b7 95       	ror	r27
    18bc:	f7 95       	ror	r31
    18be:	e7 95       	ror	r30
    18c0:	9f 5f       	subi	r25, 0xFF	; 255
    18c2:	c1 f7       	brne	.-16     	; 0x18b4 <__mulsf3_pse+0x8c>
    18c4:	fe 2b       	or	r31, r30
    18c6:	88 0f       	add	r24, r24
    18c8:	91 1d       	adc	r25, r1
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	97 f9       	bld	r25, 7
    18d0:	08 95       	ret

000018d2 <__udivmodhi4>:
    18d2:	aa 1b       	sub	r26, r26
    18d4:	bb 1b       	sub	r27, r27
    18d6:	51 e1       	ldi	r21, 0x11	; 17
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <__udivmodhi4_ep>

000018da <__udivmodhi4_loop>:
    18da:	aa 1f       	adc	r26, r26
    18dc:	bb 1f       	adc	r27, r27
    18de:	a6 17       	cp	r26, r22
    18e0:	b7 07       	cpc	r27, r23
    18e2:	10 f0       	brcs	.+4      	; 0x18e8 <__udivmodhi4_ep>
    18e4:	a6 1b       	sub	r26, r22
    18e6:	b7 0b       	sbc	r27, r23

000018e8 <__udivmodhi4_ep>:
    18e8:	88 1f       	adc	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	5a 95       	dec	r21
    18ee:	a9 f7       	brne	.-22     	; 0x18da <__udivmodhi4_loop>
    18f0:	80 95       	com	r24
    18f2:	90 95       	com	r25
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	08 95       	ret

000018fa <__umulhisi3>:
    18fa:	a2 9f       	mul	r26, r18
    18fc:	b0 01       	movw	r22, r0
    18fe:	b3 9f       	mul	r27, r19
    1900:	c0 01       	movw	r24, r0
    1902:	a3 9f       	mul	r26, r19
    1904:	70 0d       	add	r23, r0
    1906:	81 1d       	adc	r24, r1
    1908:	11 24       	eor	r1, r1
    190a:	91 1d       	adc	r25, r1
    190c:	b2 9f       	mul	r27, r18
    190e:	70 0d       	add	r23, r0
    1910:	81 1d       	adc	r24, r1
    1912:	11 24       	eor	r1, r1
    1914:	91 1d       	adc	r25, r1
    1916:	08 95       	ret

00001918 <__umulsidi3>:
    1918:	e8 94       	clt

0000191a <__umulsidi3_helper>:
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	fc 01       	movw	r30, r24
    1920:	db 01       	movw	r26, r22
    1922:	eb df       	rcall	.-42     	; 0x18fa <__umulhisi3>
    1924:	7f 93       	push	r23
    1926:	6f 93       	push	r22
    1928:	e9 01       	movw	r28, r18
    192a:	9a 01       	movw	r18, r20
    192c:	ac 01       	movw	r20, r24
    192e:	bf 93       	push	r27
    1930:	af 93       	push	r26
    1932:	3f 93       	push	r19
    1934:	2f 93       	push	r18
    1936:	df 01       	movw	r26, r30
    1938:	e0 df       	rcall	.-64     	; 0x18fa <__umulhisi3>
    193a:	26 f4       	brtc	.+8      	; 0x1944 <__umulsidi3_helper+0x2a>
    193c:	6c 1b       	sub	r22, r28
    193e:	7d 0b       	sbc	r23, r29
    1940:	82 0b       	sbc	r24, r18
    1942:	93 0b       	sbc	r25, r19
    1944:	9e 01       	movw	r18, r28
    1946:	eb 01       	movw	r28, r22
    1948:	fc 01       	movw	r30, r24
    194a:	2b d0       	rcall	.+86     	; 0x19a2 <__muldi3_6>
    194c:	af 91       	pop	r26
    194e:	bf 91       	pop	r27
    1950:	2f 91       	pop	r18
    1952:	3f 91       	pop	r19
    1954:	26 d0       	rcall	.+76     	; 0x19a2 <__muldi3_6>
    1956:	be 01       	movw	r22, r28
    1958:	cf 01       	movw	r24, r30
    195a:	f9 01       	movw	r30, r18
    195c:	2f 91       	pop	r18
    195e:	3f 91       	pop	r19
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <__ashrdi3>:
    1966:	97 fb       	bst	r25, 7
    1968:	10 f8       	bld	r1, 0

0000196a <__lshrdi3>:
    196a:	16 94       	lsr	r1
    196c:	00 08       	sbc	r0, r0
    196e:	0f 93       	push	r16
    1970:	08 30       	cpi	r16, 0x08	; 8
    1972:	98 f0       	brcs	.+38     	; 0x199a <__lshrdi3+0x30>
    1974:	08 50       	subi	r16, 0x08	; 8
    1976:	23 2f       	mov	r18, r19
    1978:	34 2f       	mov	r19, r20
    197a:	45 2f       	mov	r20, r21
    197c:	56 2f       	mov	r21, r22
    197e:	67 2f       	mov	r22, r23
    1980:	78 2f       	mov	r23, r24
    1982:	89 2f       	mov	r24, r25
    1984:	90 2d       	mov	r25, r0
    1986:	f4 cf       	rjmp	.-24     	; 0x1970 <__lshrdi3+0x6>
    1988:	05 94       	asr	r0
    198a:	97 95       	ror	r25
    198c:	87 95       	ror	r24
    198e:	77 95       	ror	r23
    1990:	67 95       	ror	r22
    1992:	57 95       	ror	r21
    1994:	47 95       	ror	r20
    1996:	37 95       	ror	r19
    1998:	27 95       	ror	r18
    199a:	0a 95       	dec	r16
    199c:	aa f7       	brpl	.-22     	; 0x1988 <__lshrdi3+0x1e>
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <__muldi3_6>:
    19a2:	ab df       	rcall	.-170    	; 0x18fa <__umulhisi3>
    19a4:	46 0f       	add	r20, r22
    19a6:	57 1f       	adc	r21, r23
    19a8:	c8 1f       	adc	r28, r24
    19aa:	d9 1f       	adc	r29, r25
    19ac:	08 f4       	brcc	.+2      	; 0x19b0 <__muldi3_6+0xe>
    19ae:	31 96       	adiw	r30, 0x01	; 1
    19b0:	08 95       	ret

000019b2 <sprintf>:
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	2e 97       	sbiw	r28, 0x0e	; 14
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	0d 89       	ldd	r16, Y+21	; 0x15
    19cc:	1e 89       	ldd	r17, Y+22	; 0x16
    19ce:	86 e0       	ldi	r24, 0x06	; 6
    19d0:	8c 83       	std	Y+4, r24	; 0x04
    19d2:	1a 83       	std	Y+2, r17	; 0x02
    19d4:	09 83       	std	Y+1, r16	; 0x01
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	9f e7       	ldi	r25, 0x7F	; 127
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
    19de:	ae 01       	movw	r20, r28
    19e0:	47 5e       	subi	r20, 0xE7	; 231
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	6f 89       	ldd	r22, Y+23	; 0x17
    19e6:	78 8d       	ldd	r23, Y+24	; 0x18
    19e8:	ce 01       	movw	r24, r28
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	10 d0       	rcall	.+32     	; 0x1a0e <vfprintf>
    19ee:	ef 81       	ldd	r30, Y+7	; 0x07
    19f0:	f8 85       	ldd	r31, Y+8	; 0x08
    19f2:	e0 0f       	add	r30, r16
    19f4:	f1 1f       	adc	r31, r17
    19f6:	10 82       	st	Z, r1
    19f8:	2e 96       	adiw	r28, 0x0e	; 14
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <vfprintf>:
    1a0e:	2f 92       	push	r2
    1a10:	3f 92       	push	r3
    1a12:	4f 92       	push	r4
    1a14:	5f 92       	push	r5
    1a16:	6f 92       	push	r6
    1a18:	7f 92       	push	r7
    1a1a:	8f 92       	push	r8
    1a1c:	9f 92       	push	r9
    1a1e:	af 92       	push	r10
    1a20:	bf 92       	push	r11
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	2b 97       	sbiw	r28, 0x0b	; 11
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	6c 01       	movw	r12, r24
    1a44:	7b 01       	movw	r14, r22
    1a46:	8a 01       	movw	r16, r20
    1a48:	fc 01       	movw	r30, r24
    1a4a:	17 82       	std	Z+7, r1	; 0x07
    1a4c:	16 82       	std	Z+6, r1	; 0x06
    1a4e:	83 81       	ldd	r24, Z+3	; 0x03
    1a50:	81 ff       	sbrs	r24, 1
    1a52:	bf c1       	rjmp	.+894    	; 0x1dd2 <vfprintf+0x3c4>
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	3c 01       	movw	r6, r24
    1a5a:	f6 01       	movw	r30, r12
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	f7 01       	movw	r30, r14
    1a60:	93 fd       	sbrc	r25, 3
    1a62:	85 91       	lpm	r24, Z+
    1a64:	93 ff       	sbrs	r25, 3
    1a66:	81 91       	ld	r24, Z+
    1a68:	7f 01       	movw	r14, r30
    1a6a:	88 23       	and	r24, r24
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <vfprintf+0x62>
    1a6e:	ad c1       	rjmp	.+858    	; 0x1dca <vfprintf+0x3bc>
    1a70:	85 32       	cpi	r24, 0x25	; 37
    1a72:	39 f4       	brne	.+14     	; 0x1a82 <vfprintf+0x74>
    1a74:	93 fd       	sbrc	r25, 3
    1a76:	85 91       	lpm	r24, Z+
    1a78:	93 ff       	sbrs	r25, 3
    1a7a:	81 91       	ld	r24, Z+
    1a7c:	7f 01       	movw	r14, r30
    1a7e:	85 32       	cpi	r24, 0x25	; 37
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <vfprintf+0x7c>
    1a82:	b6 01       	movw	r22, r12
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	d6 d1       	rcall	.+940    	; 0x1e34 <fputc>
    1a88:	e8 cf       	rjmp	.-48     	; 0x1a5a <vfprintf+0x4c>
    1a8a:	91 2c       	mov	r9, r1
    1a8c:	21 2c       	mov	r2, r1
    1a8e:	31 2c       	mov	r3, r1
    1a90:	ff e1       	ldi	r31, 0x1F	; 31
    1a92:	f3 15       	cp	r31, r3
    1a94:	d8 f0       	brcs	.+54     	; 0x1acc <vfprintf+0xbe>
    1a96:	8b 32       	cpi	r24, 0x2B	; 43
    1a98:	79 f0       	breq	.+30     	; 0x1ab8 <vfprintf+0xaa>
    1a9a:	38 f4       	brcc	.+14     	; 0x1aaa <vfprintf+0x9c>
    1a9c:	80 32       	cpi	r24, 0x20	; 32
    1a9e:	79 f0       	breq	.+30     	; 0x1abe <vfprintf+0xb0>
    1aa0:	83 32       	cpi	r24, 0x23	; 35
    1aa2:	a1 f4       	brne	.+40     	; 0x1acc <vfprintf+0xbe>
    1aa4:	23 2d       	mov	r18, r3
    1aa6:	20 61       	ori	r18, 0x10	; 16
    1aa8:	1d c0       	rjmp	.+58     	; 0x1ae4 <vfprintf+0xd6>
    1aaa:	8d 32       	cpi	r24, 0x2D	; 45
    1aac:	61 f0       	breq	.+24     	; 0x1ac6 <vfprintf+0xb8>
    1aae:	80 33       	cpi	r24, 0x30	; 48
    1ab0:	69 f4       	brne	.+26     	; 0x1acc <vfprintf+0xbe>
    1ab2:	23 2d       	mov	r18, r3
    1ab4:	21 60       	ori	r18, 0x01	; 1
    1ab6:	16 c0       	rjmp	.+44     	; 0x1ae4 <vfprintf+0xd6>
    1ab8:	83 2d       	mov	r24, r3
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	38 2e       	mov	r3, r24
    1abe:	e3 2d       	mov	r30, r3
    1ac0:	e4 60       	ori	r30, 0x04	; 4
    1ac2:	3e 2e       	mov	r3, r30
    1ac4:	2a c0       	rjmp	.+84     	; 0x1b1a <vfprintf+0x10c>
    1ac6:	f3 2d       	mov	r31, r3
    1ac8:	f8 60       	ori	r31, 0x08	; 8
    1aca:	1d c0       	rjmp	.+58     	; 0x1b06 <vfprintf+0xf8>
    1acc:	37 fc       	sbrc	r3, 7
    1ace:	2d c0       	rjmp	.+90     	; 0x1b2a <vfprintf+0x11c>
    1ad0:	20 ed       	ldi	r18, 0xD0	; 208
    1ad2:	28 0f       	add	r18, r24
    1ad4:	2a 30       	cpi	r18, 0x0A	; 10
    1ad6:	40 f0       	brcs	.+16     	; 0x1ae8 <vfprintf+0xda>
    1ad8:	8e 32       	cpi	r24, 0x2E	; 46
    1ada:	b9 f4       	brne	.+46     	; 0x1b0a <vfprintf+0xfc>
    1adc:	36 fc       	sbrc	r3, 6
    1ade:	75 c1       	rjmp	.+746    	; 0x1dca <vfprintf+0x3bc>
    1ae0:	23 2d       	mov	r18, r3
    1ae2:	20 64       	ori	r18, 0x40	; 64
    1ae4:	32 2e       	mov	r3, r18
    1ae6:	19 c0       	rjmp	.+50     	; 0x1b1a <vfprintf+0x10c>
    1ae8:	36 fe       	sbrs	r3, 6
    1aea:	06 c0       	rjmp	.+12     	; 0x1af8 <vfprintf+0xea>
    1aec:	8a e0       	ldi	r24, 0x0A	; 10
    1aee:	98 9e       	mul	r9, r24
    1af0:	20 0d       	add	r18, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	92 2e       	mov	r9, r18
    1af6:	11 c0       	rjmp	.+34     	; 0x1b1a <vfprintf+0x10c>
    1af8:	ea e0       	ldi	r30, 0x0A	; 10
    1afa:	2e 9e       	mul	r2, r30
    1afc:	20 0d       	add	r18, r0
    1afe:	11 24       	eor	r1, r1
    1b00:	22 2e       	mov	r2, r18
    1b02:	f3 2d       	mov	r31, r3
    1b04:	f0 62       	ori	r31, 0x20	; 32
    1b06:	3f 2e       	mov	r3, r31
    1b08:	08 c0       	rjmp	.+16     	; 0x1b1a <vfprintf+0x10c>
    1b0a:	8c 36       	cpi	r24, 0x6C	; 108
    1b0c:	21 f4       	brne	.+8      	; 0x1b16 <vfprintf+0x108>
    1b0e:	83 2d       	mov	r24, r3
    1b10:	80 68       	ori	r24, 0x80	; 128
    1b12:	38 2e       	mov	r3, r24
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <vfprintf+0x10c>
    1b16:	88 36       	cpi	r24, 0x68	; 104
    1b18:	41 f4       	brne	.+16     	; 0x1b2a <vfprintf+0x11c>
    1b1a:	f7 01       	movw	r30, r14
    1b1c:	93 fd       	sbrc	r25, 3
    1b1e:	85 91       	lpm	r24, Z+
    1b20:	93 ff       	sbrs	r25, 3
    1b22:	81 91       	ld	r24, Z+
    1b24:	7f 01       	movw	r14, r30
    1b26:	81 11       	cpse	r24, r1
    1b28:	b3 cf       	rjmp	.-154    	; 0x1a90 <vfprintf+0x82>
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	9f 7d       	andi	r25, 0xDF	; 223
    1b2e:	95 54       	subi	r25, 0x45	; 69
    1b30:	93 30       	cpi	r25, 0x03	; 3
    1b32:	28 f4       	brcc	.+10     	; 0x1b3e <vfprintf+0x130>
    1b34:	0c 5f       	subi	r16, 0xFC	; 252
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	9f e3       	ldi	r25, 0x3F	; 63
    1b3a:	99 83       	std	Y+1, r25	; 0x01
    1b3c:	0d c0       	rjmp	.+26     	; 0x1b58 <vfprintf+0x14a>
    1b3e:	83 36       	cpi	r24, 0x63	; 99
    1b40:	31 f0       	breq	.+12     	; 0x1b4e <vfprintf+0x140>
    1b42:	83 37       	cpi	r24, 0x73	; 115
    1b44:	71 f0       	breq	.+28     	; 0x1b62 <vfprintf+0x154>
    1b46:	83 35       	cpi	r24, 0x53	; 83
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <vfprintf+0x13e>
    1b4a:	55 c0       	rjmp	.+170    	; 0x1bf6 <vfprintf+0x1e8>
    1b4c:	20 c0       	rjmp	.+64     	; 0x1b8e <vfprintf+0x180>
    1b4e:	f8 01       	movw	r30, r16
    1b50:	80 81       	ld	r24, Z
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	0e 5f       	subi	r16, 0xFE	; 254
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	88 24       	eor	r8, r8
    1b5a:	83 94       	inc	r8
    1b5c:	91 2c       	mov	r9, r1
    1b5e:	53 01       	movw	r10, r6
    1b60:	12 c0       	rjmp	.+36     	; 0x1b86 <vfprintf+0x178>
    1b62:	28 01       	movw	r4, r16
    1b64:	f2 e0       	ldi	r31, 0x02	; 2
    1b66:	4f 0e       	add	r4, r31
    1b68:	51 1c       	adc	r5, r1
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	a0 80       	ld	r10, Z
    1b6e:	b1 80       	ldd	r11, Z+1	; 0x01
    1b70:	36 fe       	sbrs	r3, 6
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <vfprintf+0x16c>
    1b74:	69 2d       	mov	r22, r9
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <vfprintf+0x170>
    1b7a:	6f ef       	ldi	r22, 0xFF	; 255
    1b7c:	7f ef       	ldi	r23, 0xFF	; 255
    1b7e:	c5 01       	movw	r24, r10
    1b80:	4e d1       	rcall	.+668    	; 0x1e1e <strnlen>
    1b82:	4c 01       	movw	r8, r24
    1b84:	82 01       	movw	r16, r4
    1b86:	f3 2d       	mov	r31, r3
    1b88:	ff 77       	andi	r31, 0x7F	; 127
    1b8a:	3f 2e       	mov	r3, r31
    1b8c:	15 c0       	rjmp	.+42     	; 0x1bb8 <vfprintf+0x1aa>
    1b8e:	28 01       	movw	r4, r16
    1b90:	22 e0       	ldi	r18, 0x02	; 2
    1b92:	42 0e       	add	r4, r18
    1b94:	51 1c       	adc	r5, r1
    1b96:	f8 01       	movw	r30, r16
    1b98:	a0 80       	ld	r10, Z
    1b9a:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9c:	36 fe       	sbrs	r3, 6
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <vfprintf+0x198>
    1ba0:	69 2d       	mov	r22, r9
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <vfprintf+0x19c>
    1ba6:	6f ef       	ldi	r22, 0xFF	; 255
    1ba8:	7f ef       	ldi	r23, 0xFF	; 255
    1baa:	c5 01       	movw	r24, r10
    1bac:	2d d1       	rcall	.+602    	; 0x1e08 <strnlen_P>
    1bae:	4c 01       	movw	r8, r24
    1bb0:	f3 2d       	mov	r31, r3
    1bb2:	f0 68       	ori	r31, 0x80	; 128
    1bb4:	3f 2e       	mov	r3, r31
    1bb6:	82 01       	movw	r16, r4
    1bb8:	33 fc       	sbrc	r3, 3
    1bba:	19 c0       	rjmp	.+50     	; 0x1bee <vfprintf+0x1e0>
    1bbc:	82 2d       	mov	r24, r2
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	88 16       	cp	r8, r24
    1bc2:	99 06       	cpc	r9, r25
    1bc4:	a0 f4       	brcc	.+40     	; 0x1bee <vfprintf+0x1e0>
    1bc6:	b6 01       	movw	r22, r12
    1bc8:	80 e2       	ldi	r24, 0x20	; 32
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	33 d1       	rcall	.+614    	; 0x1e34 <fputc>
    1bce:	2a 94       	dec	r2
    1bd0:	f5 cf       	rjmp	.-22     	; 0x1bbc <vfprintf+0x1ae>
    1bd2:	f5 01       	movw	r30, r10
    1bd4:	37 fc       	sbrc	r3, 7
    1bd6:	85 91       	lpm	r24, Z+
    1bd8:	37 fe       	sbrs	r3, 7
    1bda:	81 91       	ld	r24, Z+
    1bdc:	5f 01       	movw	r10, r30
    1bde:	b6 01       	movw	r22, r12
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	28 d1       	rcall	.+592    	; 0x1e34 <fputc>
    1be4:	21 10       	cpse	r2, r1
    1be6:	2a 94       	dec	r2
    1be8:	21 e0       	ldi	r18, 0x01	; 1
    1bea:	82 1a       	sub	r8, r18
    1bec:	91 08       	sbc	r9, r1
    1bee:	81 14       	cp	r8, r1
    1bf0:	91 04       	cpc	r9, r1
    1bf2:	79 f7       	brne	.-34     	; 0x1bd2 <vfprintf+0x1c4>
    1bf4:	e1 c0       	rjmp	.+450    	; 0x1db8 <vfprintf+0x3aa>
    1bf6:	84 36       	cpi	r24, 0x64	; 100
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <vfprintf+0x1f0>
    1bfa:	89 36       	cpi	r24, 0x69	; 105
    1bfc:	39 f5       	brne	.+78     	; 0x1c4c <vfprintf+0x23e>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	37 fe       	sbrs	r3, 7
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <vfprintf+0x204>
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	0c 5f       	subi	r16, 0xFC	; 252
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	08 c0       	rjmp	.+16     	; 0x1c22 <vfprintf+0x214>
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	07 2e       	mov	r0, r23
    1c18:	00 0c       	add	r0, r0
    1c1a:	88 0b       	sbc	r24, r24
    1c1c:	99 0b       	sbc	r25, r25
    1c1e:	0e 5f       	subi	r16, 0xFE	; 254
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	f3 2d       	mov	r31, r3
    1c24:	ff 76       	andi	r31, 0x6F	; 111
    1c26:	3f 2e       	mov	r3, r31
    1c28:	97 ff       	sbrs	r25, 7
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <vfprintf+0x230>
    1c2c:	90 95       	com	r25
    1c2e:	80 95       	com	r24
    1c30:	70 95       	com	r23
    1c32:	61 95       	neg	r22
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	8f 4f       	sbci	r24, 0xFF	; 255
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	f0 68       	ori	r31, 0x80	; 128
    1c3c:	3f 2e       	mov	r3, r31
    1c3e:	2a e0       	ldi	r18, 0x0A	; 10
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	a3 01       	movw	r20, r6
    1c44:	33 d1       	rcall	.+614    	; 0x1eac <__ultoa_invert>
    1c46:	88 2e       	mov	r8, r24
    1c48:	86 18       	sub	r8, r6
    1c4a:	44 c0       	rjmp	.+136    	; 0x1cd4 <vfprintf+0x2c6>
    1c4c:	85 37       	cpi	r24, 0x75	; 117
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <vfprintf+0x24e>
    1c50:	23 2d       	mov	r18, r3
    1c52:	2f 7e       	andi	r18, 0xEF	; 239
    1c54:	b2 2e       	mov	r11, r18
    1c56:	2a e0       	ldi	r18, 0x0A	; 10
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	25 c0       	rjmp	.+74     	; 0x1ca6 <vfprintf+0x298>
    1c5c:	93 2d       	mov	r25, r3
    1c5e:	99 7f       	andi	r25, 0xF9	; 249
    1c60:	b9 2e       	mov	r11, r25
    1c62:	8f 36       	cpi	r24, 0x6F	; 111
    1c64:	c1 f0       	breq	.+48     	; 0x1c96 <vfprintf+0x288>
    1c66:	18 f4       	brcc	.+6      	; 0x1c6e <vfprintf+0x260>
    1c68:	88 35       	cpi	r24, 0x58	; 88
    1c6a:	79 f0       	breq	.+30     	; 0x1c8a <vfprintf+0x27c>
    1c6c:	ae c0       	rjmp	.+348    	; 0x1dca <vfprintf+0x3bc>
    1c6e:	80 37       	cpi	r24, 0x70	; 112
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <vfprintf+0x26a>
    1c72:	88 37       	cpi	r24, 0x78	; 120
    1c74:	21 f0       	breq	.+8      	; 0x1c7e <vfprintf+0x270>
    1c76:	a9 c0       	rjmp	.+338    	; 0x1dca <vfprintf+0x3bc>
    1c78:	e9 2f       	mov	r30, r25
    1c7a:	e0 61       	ori	r30, 0x10	; 16
    1c7c:	be 2e       	mov	r11, r30
    1c7e:	b4 fe       	sbrs	r11, 4
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <vfprintf+0x28e>
    1c82:	fb 2d       	mov	r31, r11
    1c84:	f4 60       	ori	r31, 0x04	; 4
    1c86:	bf 2e       	mov	r11, r31
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <vfprintf+0x28e>
    1c8a:	34 fe       	sbrs	r3, 4
    1c8c:	0a c0       	rjmp	.+20     	; 0x1ca2 <vfprintf+0x294>
    1c8e:	29 2f       	mov	r18, r25
    1c90:	26 60       	ori	r18, 0x06	; 6
    1c92:	b2 2e       	mov	r11, r18
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <vfprintf+0x294>
    1c96:	28 e0       	ldi	r18, 0x08	; 8
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <vfprintf+0x298>
    1c9c:	20 e1       	ldi	r18, 0x10	; 16
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <vfprintf+0x298>
    1ca2:	20 e1       	ldi	r18, 0x10	; 16
    1ca4:	32 e0       	ldi	r19, 0x02	; 2
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	b7 fe       	sbrs	r11, 7
    1caa:	07 c0       	rjmp	.+14     	; 0x1cba <vfprintf+0x2ac>
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	0c 5f       	subi	r16, 0xFC	; 252
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	06 c0       	rjmp	.+12     	; 0x1cc6 <vfprintf+0x2b8>
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 5f       	subi	r16, 0xFE	; 254
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	a3 01       	movw	r20, r6
    1cc8:	f1 d0       	rcall	.+482    	; 0x1eac <__ultoa_invert>
    1cca:	88 2e       	mov	r8, r24
    1ccc:	86 18       	sub	r8, r6
    1cce:	fb 2d       	mov	r31, r11
    1cd0:	ff 77       	andi	r31, 0x7F	; 127
    1cd2:	3f 2e       	mov	r3, r31
    1cd4:	36 fe       	sbrs	r3, 6
    1cd6:	0d c0       	rjmp	.+26     	; 0x1cf2 <vfprintf+0x2e4>
    1cd8:	23 2d       	mov	r18, r3
    1cda:	2e 7f       	andi	r18, 0xFE	; 254
    1cdc:	a2 2e       	mov	r10, r18
    1cde:	89 14       	cp	r8, r9
    1ce0:	58 f4       	brcc	.+22     	; 0x1cf8 <vfprintf+0x2ea>
    1ce2:	34 fe       	sbrs	r3, 4
    1ce4:	0b c0       	rjmp	.+22     	; 0x1cfc <vfprintf+0x2ee>
    1ce6:	32 fc       	sbrc	r3, 2
    1ce8:	09 c0       	rjmp	.+18     	; 0x1cfc <vfprintf+0x2ee>
    1cea:	83 2d       	mov	r24, r3
    1cec:	8e 7e       	andi	r24, 0xEE	; 238
    1cee:	a8 2e       	mov	r10, r24
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <vfprintf+0x2ee>
    1cf2:	b8 2c       	mov	r11, r8
    1cf4:	a3 2c       	mov	r10, r3
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <vfprintf+0x2f0>
    1cf8:	b8 2c       	mov	r11, r8
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <vfprintf+0x2f0>
    1cfc:	b9 2c       	mov	r11, r9
    1cfe:	a4 fe       	sbrs	r10, 4
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <vfprintf+0x312>
    1d02:	fe 01       	movw	r30, r28
    1d04:	e8 0d       	add	r30, r8
    1d06:	f1 1d       	adc	r31, r1
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 33       	cpi	r24, 0x30	; 48
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <vfprintf+0x308>
    1d0e:	9a 2d       	mov	r25, r10
    1d10:	99 7e       	andi	r25, 0xE9	; 233
    1d12:	a9 2e       	mov	r10, r25
    1d14:	09 c0       	rjmp	.+18     	; 0x1d28 <vfprintf+0x31a>
    1d16:	a2 fe       	sbrs	r10, 2
    1d18:	06 c0       	rjmp	.+12     	; 0x1d26 <vfprintf+0x318>
    1d1a:	b3 94       	inc	r11
    1d1c:	b3 94       	inc	r11
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <vfprintf+0x31a>
    1d20:	8a 2d       	mov	r24, r10
    1d22:	86 78       	andi	r24, 0x86	; 134
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <vfprintf+0x31a>
    1d26:	b3 94       	inc	r11
    1d28:	a3 fc       	sbrc	r10, 3
    1d2a:	10 c0       	rjmp	.+32     	; 0x1d4c <vfprintf+0x33e>
    1d2c:	a0 fe       	sbrs	r10, 0
    1d2e:	06 c0       	rjmp	.+12     	; 0x1d3c <vfprintf+0x32e>
    1d30:	b2 14       	cp	r11, r2
    1d32:	80 f4       	brcc	.+32     	; 0x1d54 <vfprintf+0x346>
    1d34:	28 0c       	add	r2, r8
    1d36:	92 2c       	mov	r9, r2
    1d38:	9b 18       	sub	r9, r11
    1d3a:	0d c0       	rjmp	.+26     	; 0x1d56 <vfprintf+0x348>
    1d3c:	b2 14       	cp	r11, r2
    1d3e:	58 f4       	brcc	.+22     	; 0x1d56 <vfprintf+0x348>
    1d40:	b6 01       	movw	r22, r12
    1d42:	80 e2       	ldi	r24, 0x20	; 32
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	76 d0       	rcall	.+236    	; 0x1e34 <fputc>
    1d48:	b3 94       	inc	r11
    1d4a:	f8 cf       	rjmp	.-16     	; 0x1d3c <vfprintf+0x32e>
    1d4c:	b2 14       	cp	r11, r2
    1d4e:	18 f4       	brcc	.+6      	; 0x1d56 <vfprintf+0x348>
    1d50:	2b 18       	sub	r2, r11
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <vfprintf+0x34a>
    1d54:	98 2c       	mov	r9, r8
    1d56:	21 2c       	mov	r2, r1
    1d58:	a4 fe       	sbrs	r10, 4
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <vfprintf+0x36c>
    1d5c:	b6 01       	movw	r22, r12
    1d5e:	80 e3       	ldi	r24, 0x30	; 48
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	68 d0       	rcall	.+208    	; 0x1e34 <fputc>
    1d64:	a2 fe       	sbrs	r10, 2
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <vfprintf+0x386>
    1d68:	a1 fc       	sbrc	r10, 1
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <vfprintf+0x364>
    1d6c:	88 e7       	ldi	r24, 0x78	; 120
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x368>
    1d72:	88 e5       	ldi	r24, 0x58	; 88
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	b6 01       	movw	r22, r12
    1d78:	0c c0       	rjmp	.+24     	; 0x1d92 <vfprintf+0x384>
    1d7a:	8a 2d       	mov	r24, r10
    1d7c:	86 78       	andi	r24, 0x86	; 134
    1d7e:	51 f0       	breq	.+20     	; 0x1d94 <vfprintf+0x386>
    1d80:	a1 fe       	sbrs	r10, 1
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <vfprintf+0x37a>
    1d84:	8b e2       	ldi	r24, 0x2B	; 43
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <vfprintf+0x37c>
    1d88:	80 e2       	ldi	r24, 0x20	; 32
    1d8a:	a7 fc       	sbrc	r10, 7
    1d8c:	8d e2       	ldi	r24, 0x2D	; 45
    1d8e:	b6 01       	movw	r22, r12
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	50 d0       	rcall	.+160    	; 0x1e34 <fputc>
    1d94:	89 14       	cp	r8, r9
    1d96:	30 f4       	brcc	.+12     	; 0x1da4 <vfprintf+0x396>
    1d98:	b6 01       	movw	r22, r12
    1d9a:	80 e3       	ldi	r24, 0x30	; 48
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	4a d0       	rcall	.+148    	; 0x1e34 <fputc>
    1da0:	9a 94       	dec	r9
    1da2:	f8 cf       	rjmp	.-16     	; 0x1d94 <vfprintf+0x386>
    1da4:	8a 94       	dec	r8
    1da6:	f3 01       	movw	r30, r6
    1da8:	e8 0d       	add	r30, r8
    1daa:	f1 1d       	adc	r31, r1
    1dac:	80 81       	ld	r24, Z
    1dae:	b6 01       	movw	r22, r12
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	40 d0       	rcall	.+128    	; 0x1e34 <fputc>
    1db4:	81 10       	cpse	r8, r1
    1db6:	f6 cf       	rjmp	.-20     	; 0x1da4 <vfprintf+0x396>
    1db8:	22 20       	and	r2, r2
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <vfprintf+0x3b0>
    1dbc:	4e ce       	rjmp	.-868    	; 0x1a5a <vfprintf+0x4c>
    1dbe:	b6 01       	movw	r22, r12
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	37 d0       	rcall	.+110    	; 0x1e34 <fputc>
    1dc6:	2a 94       	dec	r2
    1dc8:	f7 cf       	rjmp	.-18     	; 0x1db8 <vfprintf+0x3aa>
    1dca:	f6 01       	movw	r30, r12
    1dcc:	86 81       	ldd	r24, Z+6	; 0x06
    1dce:	97 81       	ldd	r25, Z+7	; 0x07
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x3c8>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	2b 96       	adiw	r28, 0x0b	; 11
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	9f 90       	pop	r9
    1df8:	8f 90       	pop	r8
    1dfa:	7f 90       	pop	r7
    1dfc:	6f 90       	pop	r6
    1dfe:	5f 90       	pop	r5
    1e00:	4f 90       	pop	r4
    1e02:	3f 90       	pop	r3
    1e04:	2f 90       	pop	r2
    1e06:	08 95       	ret

00001e08 <strnlen_P>:
    1e08:	fc 01       	movw	r30, r24
    1e0a:	05 90       	lpm	r0, Z+
    1e0c:	61 50       	subi	r22, 0x01	; 1
    1e0e:	70 40       	sbci	r23, 0x00	; 0
    1e10:	01 10       	cpse	r0, r1
    1e12:	d8 f7       	brcc	.-10     	; 0x1e0a <strnlen_P+0x2>
    1e14:	80 95       	com	r24
    1e16:	90 95       	com	r25
    1e18:	8e 0f       	add	r24, r30
    1e1a:	9f 1f       	adc	r25, r31
    1e1c:	08 95       	ret

00001e1e <strnlen>:
    1e1e:	fc 01       	movw	r30, r24
    1e20:	61 50       	subi	r22, 0x01	; 1
    1e22:	70 40       	sbci	r23, 0x00	; 0
    1e24:	01 90       	ld	r0, Z+
    1e26:	01 10       	cpse	r0, r1
    1e28:	d8 f7       	brcc	.-10     	; 0x1e20 <strnlen+0x2>
    1e2a:	80 95       	com	r24
    1e2c:	90 95       	com	r25
    1e2e:	8e 0f       	add	r24, r30
    1e30:	9f 1f       	adc	r25, r31
    1e32:	08 95       	ret

00001e34 <fputc>:
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	fb 01       	movw	r30, r22
    1e3e:	23 81       	ldd	r18, Z+3	; 0x03
    1e40:	21 fd       	sbrc	r18, 1
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <fputc+0x16>
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	9f ef       	ldi	r25, 0xFF	; 255
    1e48:	2c c0       	rjmp	.+88     	; 0x1ea2 <fputc+0x6e>
    1e4a:	22 ff       	sbrs	r18, 2
    1e4c:	16 c0       	rjmp	.+44     	; 0x1e7a <fputc+0x46>
    1e4e:	46 81       	ldd	r20, Z+6	; 0x06
    1e50:	57 81       	ldd	r21, Z+7	; 0x07
    1e52:	24 81       	ldd	r18, Z+4	; 0x04
    1e54:	35 81       	ldd	r19, Z+5	; 0x05
    1e56:	42 17       	cp	r20, r18
    1e58:	53 07       	cpc	r21, r19
    1e5a:	44 f4       	brge	.+16     	; 0x1e6c <fputc+0x38>
    1e5c:	a0 81       	ld	r26, Z
    1e5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1e60:	9d 01       	movw	r18, r26
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	31 83       	std	Z+1, r19	; 0x01
    1e68:	20 83       	st	Z, r18
    1e6a:	8c 93       	st	X, r24
    1e6c:	26 81       	ldd	r18, Z+6	; 0x06
    1e6e:	37 81       	ldd	r19, Z+7	; 0x07
    1e70:	2f 5f       	subi	r18, 0xFF	; 255
    1e72:	3f 4f       	sbci	r19, 0xFF	; 255
    1e74:	37 83       	std	Z+7, r19	; 0x07
    1e76:	26 83       	std	Z+6, r18	; 0x06
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <fputc+0x6e>
    1e7a:	8b 01       	movw	r16, r22
    1e7c:	ec 01       	movw	r28, r24
    1e7e:	fb 01       	movw	r30, r22
    1e80:	00 84       	ldd	r0, Z+8	; 0x08
    1e82:	f1 85       	ldd	r31, Z+9	; 0x09
    1e84:	e0 2d       	mov	r30, r0
    1e86:	09 95       	icall
    1e88:	89 2b       	or	r24, r25
    1e8a:	e1 f6       	brne	.-72     	; 0x1e44 <fputc+0x10>
    1e8c:	d8 01       	movw	r26, r16
    1e8e:	16 96       	adiw	r26, 0x06	; 6
    1e90:	8d 91       	ld	r24, X+
    1e92:	9c 91       	ld	r25, X
    1e94:	17 97       	sbiw	r26, 0x07	; 7
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	17 96       	adiw	r26, 0x07	; 7
    1e9a:	9c 93       	st	X, r25
    1e9c:	8e 93       	st	-X, r24
    1e9e:	16 97       	sbiw	r26, 0x06	; 6
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <__ultoa_invert>:
    1eac:	fa 01       	movw	r30, r20
    1eae:	aa 27       	eor	r26, r26
    1eb0:	28 30       	cpi	r18, 0x08	; 8
    1eb2:	51 f1       	breq	.+84     	; 0x1f08 <__ultoa_invert+0x5c>
    1eb4:	20 31       	cpi	r18, 0x10	; 16
    1eb6:	81 f1       	breq	.+96     	; 0x1f18 <__ultoa_invert+0x6c>
    1eb8:	e8 94       	clt
    1eba:	6f 93       	push	r22
    1ebc:	6e 7f       	andi	r22, 0xFE	; 254
    1ebe:	6e 5f       	subi	r22, 0xFE	; 254
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	af 4f       	sbci	r26, 0xFF	; 255
    1ec8:	b1 e0       	ldi	r27, 0x01	; 1
    1eca:	3e d0       	rcall	.+124    	; 0x1f48 <__ultoa_invert+0x9c>
    1ecc:	b4 e0       	ldi	r27, 0x04	; 4
    1ece:	3c d0       	rcall	.+120    	; 0x1f48 <__ultoa_invert+0x9c>
    1ed0:	67 0f       	add	r22, r23
    1ed2:	78 1f       	adc	r23, r24
    1ed4:	89 1f       	adc	r24, r25
    1ed6:	9a 1f       	adc	r25, r26
    1ed8:	a1 1d       	adc	r26, r1
    1eda:	68 0f       	add	r22, r24
    1edc:	79 1f       	adc	r23, r25
    1ede:	8a 1f       	adc	r24, r26
    1ee0:	91 1d       	adc	r25, r1
    1ee2:	a1 1d       	adc	r26, r1
    1ee4:	6a 0f       	add	r22, r26
    1ee6:	71 1d       	adc	r23, r1
    1ee8:	81 1d       	adc	r24, r1
    1eea:	91 1d       	adc	r25, r1
    1eec:	a1 1d       	adc	r26, r1
    1eee:	20 d0       	rcall	.+64     	; 0x1f30 <__ultoa_invert+0x84>
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <__ultoa_invert+0x48>
    1ef2:	68 94       	set
    1ef4:	3f 91       	pop	r19
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	26 9f       	mul	r18, r22
    1efa:	11 24       	eor	r1, r1
    1efc:	30 19       	sub	r19, r0
    1efe:	30 5d       	subi	r19, 0xD0	; 208
    1f00:	31 93       	st	Z+, r19
    1f02:	de f6       	brtc	.-74     	; 0x1eba <__ultoa_invert+0xe>
    1f04:	cf 01       	movw	r24, r30
    1f06:	08 95       	ret
    1f08:	46 2f       	mov	r20, r22
    1f0a:	47 70       	andi	r20, 0x07	; 7
    1f0c:	40 5d       	subi	r20, 0xD0	; 208
    1f0e:	41 93       	st	Z+, r20
    1f10:	b3 e0       	ldi	r27, 0x03	; 3
    1f12:	0f d0       	rcall	.+30     	; 0x1f32 <__ultoa_invert+0x86>
    1f14:	c9 f7       	brne	.-14     	; 0x1f08 <__ultoa_invert+0x5c>
    1f16:	f6 cf       	rjmp	.-20     	; 0x1f04 <__ultoa_invert+0x58>
    1f18:	46 2f       	mov	r20, r22
    1f1a:	4f 70       	andi	r20, 0x0F	; 15
    1f1c:	40 5d       	subi	r20, 0xD0	; 208
    1f1e:	4a 33       	cpi	r20, 0x3A	; 58
    1f20:	18 f0       	brcs	.+6      	; 0x1f28 <__ultoa_invert+0x7c>
    1f22:	49 5d       	subi	r20, 0xD9	; 217
    1f24:	31 fd       	sbrc	r19, 1
    1f26:	40 52       	subi	r20, 0x20	; 32
    1f28:	41 93       	st	Z+, r20
    1f2a:	02 d0       	rcall	.+4      	; 0x1f30 <__ultoa_invert+0x84>
    1f2c:	a9 f7       	brne	.-22     	; 0x1f18 <__ultoa_invert+0x6c>
    1f2e:	ea cf       	rjmp	.-44     	; 0x1f04 <__ultoa_invert+0x58>
    1f30:	b4 e0       	ldi	r27, 0x04	; 4
    1f32:	a6 95       	lsr	r26
    1f34:	97 95       	ror	r25
    1f36:	87 95       	ror	r24
    1f38:	77 95       	ror	r23
    1f3a:	67 95       	ror	r22
    1f3c:	ba 95       	dec	r27
    1f3e:	c9 f7       	brne	.-14     	; 0x1f32 <__ultoa_invert+0x86>
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 05       	cpc	r22, r1
    1f44:	71 05       	cpc	r23, r1
    1f46:	08 95       	ret
    1f48:	9b 01       	movw	r18, r22
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	0a 2e       	mov	r0, r26
    1f4e:	06 94       	lsr	r0
    1f50:	57 95       	ror	r21
    1f52:	47 95       	ror	r20
    1f54:	37 95       	ror	r19
    1f56:	27 95       	ror	r18
    1f58:	ba 95       	dec	r27
    1f5a:	c9 f7       	brne	.-14     	; 0x1f4e <__ultoa_invert+0xa2>
    1f5c:	62 0f       	add	r22, r18
    1f5e:	73 1f       	adc	r23, r19
    1f60:	84 1f       	adc	r24, r20
    1f62:	95 1f       	adc	r25, r21
    1f64:	a0 1d       	adc	r26, r0
    1f66:	08 95       	ret

00001f68 <_exit>:
    1f68:	f8 94       	cli

00001f6a <__stop_program>:
    1f6a:	ff cf       	rjmp	.-2      	; 0x1f6a <__stop_program>
